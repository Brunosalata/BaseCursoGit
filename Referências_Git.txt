NOME
git-config - Obtenha e defina o repositório ou opções globais

SINOPSE
git config [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] <name> [<value> [<value-pattern>]]
 git config [<file-option>] [--type=<type>] --add <name> <value>
 git config [<file-option>] [- -type=<type>] [--fixed-value] --replace-all <name> <value> [<value-pattern>]
 git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get <name> [<value-pattern>]
 git config [<file-option> ] [--type=<tipo>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all <name> [<value -pattern>]
 git config] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list git config [<file-option>] --get-color <name> [<default>]
git config [<file-option>] --get-colorbool <name> [<stdout-is-tty>]
 git config [<file-option>] -e | --editar
DESCRIÇÃO
Você pode consultar/definir/substituir/desativar opções com este comando. O nome é na verdade a seção e a chave separadas por um ponto, e o valor será escapado.

Várias linhas podem ser adicionadas a uma opção usando a --addopção. Se você deseja atualizar ou desmarcar uma opção que pode ocorrer em várias linhas, a value-pattern(que é uma expressão regular estendida, a menos que a --fixed-valueopção seja fornecida) precisa ser fornecida. Apenas os valores existentes que correspondem ao padrão são atualizados ou não definidos. Se você quiser lidar com as linhas que não correspondem ao padrão, basta colocar um único ponto de exclamação na frente (consulte também EXEMPLOS ), mas observe que isso só funciona quando a --fixed-valueopção não está em uso.

A --type=<type>opção instrui o git config para garantir que os valores de entrada e saída sejam canonizáveis ​​sob o determinado <type>. Se não --type=<type>for dado, nenhuma canonização será realizada. Os chamadores podem desabilitar um --typeespecificador existente com --no-type.

Ao ler, os valores são lidos dos arquivos de configuração local do sistema, global e do repositório por padrão, e opções --system, --global, --local, --worktreee --file <filename>podem ser usados ​​para dizer ao comando para ler apenas desse local (consulte FILES ).

Ao gravar, o novo valor é gravado no arquivo de configuração local do repositório por padrão, e as opções --system, --global, --worktree, --file <filename>podem ser usadas para dizer ao comando para gravar nesse local (você pode dizer, --localmas esse é o padrão).

Este comando falhará com status diferente de zero em caso de erro. Alguns códigos de saída são:

A seção ou chave é inválida (ret=1),

nenhuma seção ou nome foi fornecido (ret=2),

o arquivo de configuração é inválido (ret=3),

o arquivo de configuração não pode ser escrito (ret=4),

você tenta desmarcar uma opção que não existe (ret=5),

você tenta desmarcar/definir uma opção para a qual várias linhas correspondem (ret=5), ou

você tenta usar um regexp inválido (ret=6).

Em caso de sucesso, o comando retorna o código de saída 0.

Uma lista de todas as variáveis ​​de configuração disponíveis pode ser obtida usando o git help --configcomando.

OPÇÕES
--substitua tudo
O comportamento padrão é substituir no máximo uma linha. Isso substitui todas as linhas correspondentes à chave (e opcionalmente a value-pattern).

--adicionar
Adiciona uma nova linha à opção sem alterar nenhum valor existente. Isso é o mesmo que fornecer ^$ como o value-pattern in --replace-all.

--pegar
Obtenha o valor de uma determinada chave (opcionalmente filtrada por uma regex que corresponda ao valor). Retorna o código de erro 1 se a chave não foi encontrada e o último valor se vários valores de chave foram encontrados.

--get-all
Como get, mas retorna todos os valores de uma chave com vários valores.

--get-regexp
Como --get-all, mas interpreta o nome como uma expressão regular e escreve os nomes das chaves. Atualmente, a correspondência de expressão regular diferencia maiúsculas de minúsculas e é feita em uma versão canonizada da chave na qual os nomes de seção e variável são minúsculos, mas os nomes de subseção não.

--get-urlmatch <nome> <URL>
Ao receber um nome de duas partes section.key, o valor de section.<URL>.key cuja parte <URL> corresponde melhor ao URL fornecido é retornado (se essa chave não existir, o valor de section.key será usado como recuo). Quando receber apenas a seção como nome, faça isso para todas as chaves da seção e liste-as. Retorna o código de erro 1 se nenhum valor for encontrado.

--global
Para opções de gravação: grave no ~/.gitconfigarquivo global em vez do repositório .git/config, grave no $XDG_CONFIG_HOME/git/configarquivo se esse arquivo existir e o ~/.gitconfigarquivo não.

Para opções de leitura: leia somente de global ~/.gitconfige de $XDG_CONFIG_HOME/git/configem vez de todos os arquivos disponíveis.

Consulte também ARQUIVOS .

--sistema
Para opções de gravação: grave em todo o sistema em $(prefix)/etc/gitconfigvez de no repositório .git/config.

Para opções de leitura: leia somente de todo o sistema em $(prefix)/etc/gitconfig vez de todos os arquivos disponíveis.

Consulte também ARQUIVOS .

--local
Para opções de gravação: grave no .git/configarquivo de repositório. Este é o comportamento padrão.

Para opções de leitura: leia apenas do repositório .git/configem vez de todos os arquivos disponíveis.

Consulte também ARQUIVOS .

--árvore de trabalho
Semelhante a --localexceto que .git/config.worktreeé lido ou gravado se extensions.worktreeConfigestiver presente. Se não é o mesmo que --local.

-f <arquivo de configuração>
--file <arquivo de configuração>
Para opções de gravação: grave no arquivo especificado em vez do repositório .git/config.

Para opções de leitura: leia apenas do arquivo especificado em vez de todos os arquivos disponíveis.

Consulte também ARQUIVOS .

--blob <blob>
Semelhante a, --filemas use o blob fornecido em vez de um arquivo. Por exemplo, você pode usar master:.gitmodules para ler valores do arquivo .gitmodules no branch master. Consulte a seção "ESPECIFICAR REVISÕES" em gitrevisions[7] para obter uma lista mais completa de maneiras de soletrar nomes de blob.

--remove-seção
Remova a seção fornecida do arquivo de configuração.

--renomear-seção
Renomeie a seção fornecida para um novo nome.

--desativar
Remova a linha correspondente à chave do arquivo de configuração.

--unset-all
Remova todas as linhas correspondentes à chave do arquivo de configuração.

-eu
--Lista
Liste todas as variáveis ​​definidas no arquivo de configuração, juntamente com seus valores.

--valor fixo
Quando usado com o value-patternargumento, trate value-patterncomo uma string exata em vez de uma expressão regular. Isso restringirá os pares nome/valor que correspondem apenas àqueles em que o valor é exatamente igual ao value-pattern.

--tipo <tipo>
git config garantirá que qualquer entrada ou saída seja válida sob as restrições de tipo fornecidas e canonizará os valores de saída no <type>formato canônico de .

Os válidos <type>incluem:

bool : canoniza valores como "true" ou "false".

int : canoniza valores como números decimais simples. Um sufixo opcional de k , m ou g fará com que o valor seja multiplicado por 1024, 1048576 ou 1073741824 na entrada.

bool-or-int : canoniza de acordo com bool ou int , conforme descrito acima.

path : canoniza adicionando uma entrelinha ~ao valor de $HOMEe ~userao diretório inicial do usuário especificado. Este especificador não tem efeito ao definir o valor (mas você pode usar git config section.variable ~/na linha de comando para deixar seu shell fazer a expansão).

expire-date : canonize convertendo de uma string de data fixa ou relativa para um timestamp. Este especificador não tem efeito ao definir o valor.

color: When getting a value, canonicalize by converting to an ANSI color escape sequence. When setting a value, a sanity-check is performed to ensure that the given value is canonicalize-able as an ANSI color, but it is written as-is.

--bool
--int
--bool-or-int
--path
--expiry-date
Historical options for selecting a type specifier. Prefer instead --type (see above).

--no-type
Un-sets the previously set type specifier (if one was previously set). This option requests that git config not canonicalize the retrieved variable. --no-type has no effect without --type=<type> or --<type>.

-z
--null
For all options that output values and/or keys, always end values with the null character (instead of a newline). Use newline instead as a delimiter between key and value. This allows for secure parsing of the output without getting confused e.g. by values that contain line breaks.

--name-only
Output only the names of config variables for --list or --get-regexp.

--show-origin
Augment the output of all queried config options with the origin type (file, standard input, blob, command line) and the actual origin (config file path, ref, or blob id if applicable).

--show-scope
Similar to --show-origin in that it augments the output of all queried config options with the scope of that value (local, global, system, command).

--get-colorbool <name> [<stdout-is-tty>]
Find the color setting for <name> (e.g. color.diff) and output "true" or "false". <stdout-is-tty> should be either "true" or "false", and is taken into account when configuration says "auto". If <stdout-is-tty> is missing, then checks the standard output of the command itself, and exits with status 0 if color is to be used, or exits with status 1 otherwise. When the color setting for name is undefined, the command uses color.ui as fallback.

--get-color <name> [<default>]
Find the color configured for name (e.g. color.diff.new) and output it as the ANSI color escape sequence to the standard output. The optional default parameter is used instead, if there is no color configured for name.

--type=color [--default=<default>]é preferível --get-color (mas observe que --get-coloromitirá a nova linha à direita impressa por --type=color).

-e
--editar
Abre um editor para modificar o arquivo de configuração especificado; ou --system, --globalou repositório (padrão).

--[não-]inclui
Respeite include.*as diretivas nos arquivos de configuração ao pesquisar valores. O padrão é offquando um arquivo específico é fornecido (por exemplo, usando --file, --global, etc) e onao pesquisar todos os arquivos de configuração.

--default <valor>
Ao usar --get, e a variável solicitada não for encontrada, comporte-se como se <valor> fosse o valor atribuído a essa variável.

CONFIGURAÇÃO
pager.configsó é respeitado ao listar a configuração, ou seja, ao usar --listou qualquer um dos --get-*que pode retornar vários resultados. O padrão é usar um pager.

ARQUIVOS
Se não for definido explicitamente com --file, existem quatro arquivos em que o git config procurará as opções de configuração:

$(prefixo)/etc/gitconfig
Arquivo de configuração de todo o sistema.

$XDG_CONFIG_HOME/git/config
Segundo arquivo de configuração específico do usuário. Se $XDG_CONFIG_HOME não estiver definido ou vazio, $HOME/.config/git/configserá usado. Qualquer variável de valor único definida neste arquivo será substituída pelo que estiver em ~/.gitconfig. É uma boa ideia não criar este arquivo se você às vezes usa versões mais antigas do Git, pois o suporte para este arquivo foi adicionado recentemente.

~/.gitconfig
Arquivo de configuração específico do usuário. Também chamado de arquivo de configuração "global".

$GIT_DIR/config
Arquivo de configuração específico do repositório.

$GIT_DIR/config.worktree
Isso é opcional e só é pesquisado quando extensions.worktreeConfigestá presente em $GIT_DIR/config.

Se nenhuma outra opção for fornecida, todas as opções de leitura lerão todos esses arquivos disponíveis. Se o arquivo de configuração global ou de todo o sistema não estiver disponível, ele será ignorado. Se o arquivo de configuração do repositório não estiver disponível ou legível, o git config sairá com um código de erro diferente de zero. No entanto, em nenhum dos casos será emitida uma mensagem de erro.

Os arquivos são lidos na ordem dada acima, com o último valor encontrado tendo precedência sobre os valores lidos anteriormente. Quando vários valores são obtidos, todos os valores de uma chave de todos os arquivos serão usados.

Você pode substituir parâmetros de configuração individuais ao executar qualquer comando git usando a -copção. Veja git[1] para detalhes.

Todas as opções de gravação serão, por padrão, gravadas no arquivo de configuração específico do repositório. Observe que isso também afeta opções como --replace-all e --unset. git config só mudará um arquivo de cada vez .

Você pode substituir essas regras usando as opções de linha de comando --global, --system, --local, --worktreee ; --fileveja OPÇÕES acima.

MEIO AMBIENTE
GIT_CONFIG_GLOBAL
GIT_CONFIG_SYSTEM
Pegue a configuração dos arquivos fornecidos em vez da configuração global ou no nível do sistema. Veja git[1] para detalhes.

GIT_CONFIG_NOSYSTEM
Se as configurações de leitura devem ser ignoradas do arquivo $(prefix)/etc/gitconfig de todo o sistema. Veja git[1] para detalhes.

Consulte também ARQUIVOS .

GIT_CONFIG_COUNT
GIT_CONFIG_KEY_<n>
GIT_CONFIG_VALUE_<n>
Se GIT_CONFIG_COUNT for definido como um número positivo, todos os pares de ambiente GIT_CONFIG_KEY_<n> e GIT_CONFIG_VALUE_<n> até esse número serão adicionados à configuração de tempo de execução do processo. Os pares de configuração são indexados a zero. Qualquer chave ou valor ausente é tratado como um erro. Um GIT_CONFIG_COUNT vazio é tratado da mesma forma que GIT_CONFIG_COUNT=0, ou seja, nenhum par é processado. Essas variáveis ​​de ambiente substituirão os valores nos arquivos de configuração, mas serão substituídas por quaisquer opções explícitas passadas via git -c.

Isso é útil para casos em que você deseja gerar vários comandos git com uma configuração comum, mas não pode depender de um arquivo de configuração, por exemplo, ao escrever scripts.

GIT_CONFIG
Se nenhuma --fileopção for fornecida git config, use o arquivo fornecido por GIT_CONFIGcomo se fosse fornecido via --file. Essa variável não tem efeito em outros comandos do Git e é principalmente para compatibilidade histórica; geralmente não há razão para usá-lo em vez da --fileopção.

EXEMPLOS
Dado um .git/config como este:

# 
# Este é o arquivo de configuração e 
# um '#' ou ';' caractere indica 
# um comentário 
# 

; variáveis ​​principais 
[core] 
	; Não confie nos modos de arquivo 
	filemode = false 

; Nosso algoritmo diff 
[diff] 
	external = /usr/local/bin/diff-wrapper 
	renames = true 

; Configurações de proxy 
[core] 
	gitproxy=proxy-command for kernel.org 
	gitproxy=default-proxy ; para todo o resto 

; HTTP 
[http] 
	sslVerify 
[http "https://weak.example.com"] 
	sslVerify = false 
	cookieFile = /tmp/cookie.txt
você pode definir o modo de arquivo como verdadeiro com

% git config core.filemode true
As entradas de comando proxy hipotéticas na verdade têm um postfix para discernir a qual URL elas se aplicam. Aqui está como alterar a entrada de kernel.org para "ssh".

% git config core.gitproxy '"ssh" para kernel.org' 'para kernel.org$'
Isso garante que apenas o par chave/valor para kernel.org seja substituído.

Para excluir a entrada para renomeações, faça

% git config --unset diff.renames
Se você deseja excluir uma entrada para uma multivar (como core.gitproxy acima), você deve fornecer um regex que corresponda ao valor de exatamente uma linha.

Para consultar o valor de uma determinada chave, faça

% git config --get core.filemode
ou

% git config core.filemode
ou, para consultar um multivar:

% git config --get core.gitproxy "para kernel.org$"
Se você quiser saber todos os valores de uma multivar, faça:

% git config --get-all core.gitproxy
If you like to live dangerously, you can replace all core.gitproxy by a new one with

% git config --replace-all core.gitproxy ssh
However, if you really only want to replace the line for the default proxy, i.e. the one without a "for …​" postfix, do something like this:

% git config core.gitproxy ssh '! for '
To actually match only values with an exclamation mark, you have to

% git config section.key value '[!]'
To add a new proxy, without altering any of the existing ones, use

% git config --add core.gitproxy '"proxy-command" for example.com'
An example to use customized color from the configuration in your script:

#!/bin/sh 
WS=$(git config --get-color color.diff.whitespace "blue reverse") 
RESET=$(git config --get-color "" "reset") 
echo "${WS} a cor do seu espaço em branco ou azul reverso${RESET}"
Para URLs em https://weak.example.com, http.sslVerifyé definido como false, enquanto é definido como truepara todos os outros:

% git config --type=bool --get-urlmatch http.sslverify https://good.example.com 
true 
% git config --type=bool --get-urlmatch http.sslverify https://weak.example. com 
false 
% git config --get-urlmatch http https://weak.example.com 
http.cookieFile /tmp/cookie.txt 
http.sslverify false
ARQUIVO DE CONFIGURAÇÃO
O arquivo de configuração do Git contém várias variáveis ​​que afetam o comportamento dos comandos do Git. Os arquivos .git/confige opcionalmente config.worktree(consulte a seção "CONFIGURATION FILE" do git-worktree[1] ) em cada repositório são usados ​​para armazenar a configuração desse repositório e $HOME/.gitconfigsão usados ​​para armazenar uma configuração por usuário como valores de fallback para o .git/config arquivo. O arquivo /etc/gitconfigpode ser usado para armazenar uma configuração padrão de todo o sistema.

As variáveis ​​de configuração são usadas tanto pelo encanamento do Git quanto pelas porcelanas. As variáveis ​​são divididas em seções, em que o nome de variável totalmente qualificado da própria variável é o último segmento separado por pontos e o nome da seção é tudo antes do último ponto. Os nomes das variáveis ​​não diferenciam maiúsculas de minúsculas, permitem apenas caracteres alfanuméricos e -, e devem começar com um caractere alfabético. Algumas variáveis ​​podem aparecer várias vezes; dizemos então que a variável é multivalorada.

Sintaxe
A sintaxe é bastante flexível e permissiva; os espaços em branco são principalmente ignorados. O # e ; os caracteres começam os comentários até o final da linha, as linhas em branco são ignoradas.

O arquivo consiste em seções e variáveis. Uma seção começa com o nome da seção entre colchetes e continua até que a próxima seção comece. Os nomes das seções não diferenciam maiúsculas de minúsculas. Apenas caracteres alfanuméricos -e .são permitidos nos nomes das seções. Cada variável deve pertencer a alguma seção, o que significa que deve haver um cabeçalho de seção antes da primeira configuração de uma variável.

As seções podem ser divididas em subseções. Para iniciar uma subseção coloque seu nome entre aspas duplas, separado por espaço do nome da seção, no cabeçalho da seção, como no exemplo abaixo:

	[seção "subseção"]
Os nomes das subseções diferenciam maiúsculas de minúsculas e podem conter quaisquer caracteres, exceto nova linha e o byte nulo. Aspas duplas "e barras invertidas podem ser incluídas escapando-as como \"e \\, respectivamente. As barras invertidas que precedem outros caracteres são eliminadas durante a leitura; por exemplo, \té lido como te \0é lido como 0. Os cabeçalhos de seção não podem abranger várias linhas. As variáveis ​​podem pertencer diretamente a uma seção ou a uma determinada subseção. Você pode ter [section]se tiver [section "subsection"], mas não precisa.

Há também uma [section.subsection]sintaxe obsoleta. Com essa sintaxe, o nome da subseção é convertido em letras minúsculas e também é comparado com distinção entre maiúsculas e minúsculas. Esses nomes de subseção seguem as mesmas restrições que os nomes de seção.

Todas as outras linhas (e o restante da linha após o cabeçalho da seção) são reconhecidas como variáveis ​​de configuração, no formato name = value (ou apenas name , que é uma abreviação para dizer que a variável é o booleano "true" ). Os nomes das variáveis ​​não diferenciam maiúsculas de minúsculas, permitem apenas caracteres alfanuméricos e -, e devem começar com um caractere alfabético.

Uma linha que define um valor pode ser continuada para a próxima linha terminando-a com um \; a barra invertida e o fim de linha são removidos. Espaços em branco iniciais após name = , o restante da linha após o primeiro caractere de comentário # ou ; , e os espaços em branco à direita da linha são descartados, a menos que estejam entre aspas duplas. Os espaços em branco internos dentro do valor são mantidos na íntegra.

Dentro de aspas duplas, os caracteres de aspas duplas "e barra invertida \devem ser escapados: use \"for "e \\for \.

As seguintes seqüências de escape (ao lado \"de e \\) são reconhecidas: \npara caractere de nova linha (NL), \tpara tabulação horizontal (HT, TAB) e \bpara backspace (BS). Outras sequências de escape de caracteres (incluindo sequências de escape octais) são inválidas.

Inclui
As seções includee includeIfpermitem incluir diretivas de configuração de outra fonte. Essas seções se comportam de forma idêntica entre si, com exceção de que includeIfas seções podem ser ignoradas se sua condição não for avaliada como verdadeira; consulte "Inclui condicionais" abaixo.

Você pode incluir um arquivo de configuração de outro configurando a variável especial include.path(ou includeIf.*.path) para o nome do arquivo a ser incluído. A variável recebe um nome de caminho como seu valor e está sujeita à expansão de til. Essas variáveis ​​podem ser dadas várias vezes.

O conteúdo do arquivo incluído é inserido imediatamente, como se tivesse sido encontrado no local da diretiva include. Se o valor da variável for um caminho relativo, o caminho será considerado relativo ao arquivo de configuração no qual a diretiva include foi encontrada. Veja abaixo exemplos.

Inclui condicional
Você pode incluir um arquivo de configuração de outro condicionalmente definindo uma includeIf.<condition>.pathvariável para o nome do arquivo a ser incluído.

A condição começa com uma palavra-chave seguida por dois pontos e alguns dados cujo formato e significado dependem da palavra-chave. As palavras-chave suportadas são:

gitdir
Os dados que seguem a palavra-chave gitdir:são usados ​​como um padrão glob. Se o local do diretório .git corresponder ao padrão, a condição de inclusão será atendida.

O local .git pode ser descoberto automaticamente ou vir da $GIT_DIR variável de ambiente. Se o repositório for descoberto automaticamente por meio de um arquivo .git (por exemplo, de submódulos ou de uma árvore de trabalho vinculada), o local .git seria o local final onde está o diretório .git, não onde está o arquivo .git.

O padrão pode conter curingas globbing padrão e dois adicionais, **/e /**, que podem corresponder a vários componentes de caminho. Consulte gitignore[5] para obter detalhes. Por conveniência:

Se o padrão começar com ~/, ~será substituído pelo conteúdo da variável de ambiente HOME.

Se o padrão começar com ./, ele será substituído pelo diretório que contém o arquivo de configuração atual.

Se o padrão não começar com ~/, ./ou /, **/ será automaticamente anexado. Por exemplo, o padrão foo/bar se torna **/foo/bare corresponderia a /any/path/to/foo/bar.

Se o padrão terminar com /, **será adicionado automaticamente. Por exemplo, o padrão foo/se torna foo/**. Em outras palavras, ele corresponde a "foo" e tudo o que está dentro, recursivamente.

gitdir/i
Isso é o mesmo, gitdirexceto que a correspondência é feita sem distinção entre maiúsculas e minúsculas (por exemplo, em sistemas de arquivos que não diferenciam maiúsculas de minúsculas)

onbranch
Os dados que seguem a palavra-chave onbranch:são considerados um padrão com curingas globbing padrão e dois adicionais, **/e /**, que podem corresponder a vários componentes de caminho. Se estivermos em uma árvore de trabalho em que o nome da ramificação que está com check-out no momento corresponde ao padrão, a condição de inclusão será atendida.

Se o padrão terminar com /, **será adicionado automaticamente. Por exemplo, o padrão foo/se torna foo/**. Em outras palavras, ele corresponde a todas as ramificações que começam com foo/. Isso é útil se suas ramificações estiverem organizadas hierarquicamente e você desejar aplicar uma configuração a todas as ramificações dessa hierarquia.

Mais algumas notas sobre a correspondência via gitdire gitdir/i:

Os links simbólicos $GIT_DIRnão são resolvidos antes da correspondência.

Ambas as versões do symlink e do caminho real dos caminhos serão correspondidas fora do $GIT_DIR. Por exemplo, se ~/git for um link simbólico para /mnt/storage/git, ambos gitdir:~/gite gitdir:/mnt/storage/git serão correspondentes.

Este não era o caso na versão inicial deste recurso na v2.13.0, que correspondia apenas à versão realpath. A configuração que deseja ser compatível com a versão inicial desse recurso precisa especificar apenas a versão do realpath ou ambas as versões.

Observe que "../" não é especial e corresponderá literalmente, o que é improvável que você queira.

Exemplo
# Core variables
[core]
	; Don't trust file modes
	filemode = false

# Our diff algorithm
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

[branch "devel"]
	remote = origin
	merge = refs/heads/devel

# Proxy settings
[core]
	gitProxy="ssh" for "kernel.org"
	gitProxy=default-proxy ; for the rest

[include]
	path = /path/to/foo.inc ; include by absolute path
	path = foo.inc ; find "foo.inc" relative to the current file
	path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

; include if $GIT_DIR is /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
	path = /path/to/foo.inc

; include for all repositories inside /path/to/group
[includeIf "gitdir:/path/to/group/"]
	path = /path/to/foo.inc

; include for all repositories inside $HOME/to/group
[includeIf "gitdir:~/to/group/"]
	path = /path/to/foo.inc

; relative paths are always relative to the including
; file (if the condition is true); their location is not
; affected by the condition
[includeIf "gitdir:/path/to/group/"]
	path = foo.inc

; include only if we are in a worktree where foo-branch is
; currently checked out
[includeIf "onbranch:foo-branch"]
	path = foo.inc
Values
Values of many variables are treated as a simple string, but there are variables that take values of specific types and there are rules as to how to spell them.

boolean
When a variable is said to take a boolean value, many synonyms are accepted for true and false; these are all case-insensitive.

true
Boolean true literals are yes, on, true, and 1. Also, a variable defined without = <value> is taken as true.

false
Boolean false literals are no, off, false, 0 and the empty string.

When converting a value to its canonical form using the --type=bool type specifier, git config will ensure that the output is "true" or "false" (spelled in lowercase).

integer
The value for many variables that specify various sizes can be suffixed with k, M,…​ to mean "scale the number by 1024", "by 1024x1024", etc.

color
The value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.

The basic colors accepted are normal, black, red, green, yellow, blue, magenta, cyan, white and default. The first color given is the foreground; the second is the background. All the basic colors except normal and default have a bright variant that can be specified by prefixing the color with bright, like brightred.

The color normal makes no change to the color. It is the same as an empty string, but can be used as the foreground color when specifying a background color alone (for example, "normal red").

The color default explicitly resets the color to the terminal default, for example to specify a cleared background. Although it varies between terminals, this is usually not the same as setting to "white black".

Colors may also be given as numbers between 0 and 255; these use ANSI 256-color mode (but note that not all terminals may support this). If your terminal supports it, you may also specify 24-bit RGB values as hex, like #ff0ab3.

The accepted attributes are bold, dim, ul, blink, reverse, italic, and strike (for crossed-out or "strikethrough" letters). The position of any attributes with respect to the colors (before, after, or in between), doesn’t matter. Specific attributes may be turned off by prefixing them with no or no- (e.g., noreverse, no-ul, etc).

The pseudo-attribute reset resets all colors and attributes before applying the specified coloring. For example, reset green will result in a green foreground and default background without any active attributes.

An empty color string produces no color effect at all. This can be used to avoid coloring specific elements without disabling color entirely.

For git’s pre-defined color slots, the attributes are meant to be reset at the beginning of each item in the colored output. So setting color.decorate.branch to black will paint that branch name in a plain black, even if the previous thing on the same output line (e.g. opening parenthesis before the list of branch names in log --decorate output) is set to be painted with bold or some other attribute. However, custom log formats may do more complicated and layered coloring, and the negated forms may be useful there.

pathname
A variable that takes a pathname value can be given a string that begins with "~/" or "~user/", and the usual tilde expansion happens to such a string: ~/ is expanded to the value of $HOME, and ~user/ to the specified user’s home directory.

If a path starts with %(prefix)/, the remainder is interpreted as a path relative to Git’s "runtime prefix", i.e. relative to the location where Git itself was installed. For example, %(prefix)/bin/ refers to the directory in which the Git executable itself lives. If Git was compiled without runtime prefix support, the compiled-in prefix will be substituted instead. In the unlikely event that a literal path needs to be specified that should not be expanded, it needs to be prefixed by ./, like so: ./%(prefix)/bin.

Variables
Note that this list is non-comprehensive and not necessarily complete. For command-specific variables, you will find a more detailed description in the appropriate manual page.

Other git-related tools may and do use their own variables. When inventing new variables for use in your own tool, make sure their names do not conflict with those that are used by Git itself and other popular tools, and describe them in your documentation.

advice.*
These variables control various optional help messages designed to aid new users. All advice.* variables default to true, and you can tell Git that you do not need help by setting these to false:

fetchShowForcedUpdates
Advice shown when git-fetch[1] takes a long time to calculate forced updates after ref updates, or to warn that the check is disabled.

pushUpdateRejected
Set this variable to false if you want to disable pushNonFFCurrent, pushNonFFMatching, pushAlreadyExists, pushFetchFirst, pushNeedsForce, and pushRefNeedsUpdate simultaneously.

pushNonFFCurrent
Advice shown when git-push[1] fails due to a non-fast-forward update to the current branch.

pushNonFFMatching
Advice shown when you ran git-push[1] and pushed matching refs explicitly (i.e. you used :, or specified a refspec that isn’t your current branch) and it resulted in a non-fast-forward error.

pushAlreadyExists
Shown when git-push[1] rejects an update that does not qualify for fast-forwarding (e.g., a tag.)

pushFetchFirst
Shown when git-push[1] rejects an update that tries to overwrite a remote ref that points at an object we do not have.

pushNeedsForce
Shown when git-push[1] rejects an update that tries to overwrite a remote ref that points at an object that is not a commit-ish, or make the remote ref point at an object that is not a commit-ish.

pushUnqualifiedRefname
Shown when git-push[1] gives up trying to guess based on the source and destination refs what remote ref namespace the source belongs in, but where we can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the source object.

pushRefNeedsUpdate
Shown when git-push[1] rejects a forced update of a branch when its remote-tracking ref has updates that we do not have locally.

skippedCherryPicks
Shown when git-rebase[1] skips a commit that has already been cherry-picked onto the upstream branch.

statusAheadBehind
Shown when git-status[1] computes the ahead/behind counts for a local ref compared to its remote tracking ref, and that calculation takes longer than expected. Will not appear if status.aheadBehind is false or the option --no-ahead-behind is given.

statusHints
Show directions on how to proceed from the current state in the output of git-status[1], in the template shown when writing commit messages in git-commit[1], and in the help message shown by git-switch[1] or git-checkout[1] when switching branch.

statusUoption
Advise to consider using the -u option to git-status[1] when the command takes more than 2 seconds to enumerate untracked files.

commitBeforeMerge
Advice shown when git-merge[1] refuses to merge to avoid overwriting local changes.

resetQuiet
Advice to consider using the --quiet option to git-reset[1] when the command takes more than 2 seconds to enumerate unstaged changes after reset.

resolveConflict
Advice shown by various commands when conflicts prevent the operation from being performed.

sequencerInUse
Advice shown when a sequencer command is already in progress.

implicitIdentity
Advice on how to set your identity configuration when your information is guessed from the system username and domain name.

detachedHead
Advice shown when you used git-switch[1] or git-checkout[1] to move to the detach HEAD state, to instruct how to create a local branch after the fact.

checkoutAmbiguousRemoteBranchName
Advice shown when the argument to git-checkout[1] and git-switch[1] ambiguously resolves to a remote tracking branch on more than one remote in situations where an unambiguous argument would have otherwise caused a remote-tracking branch to be checked out. See the checkout.defaultRemote configuration variable for how to set a given remote to used by default in some situations where this advice would be printed.

amWorkDir
Advice that shows the location of the patch file when git-am[1] fails to apply it.

rmHints
In case of failure in the output of git-rm[1], show directions on how to proceed from the current state.

addEmbeddedRepo
Advice on what to do when you’ve accidentally added one git repo inside of another.

ignoredHook
Advice shown if a hook is ignored because the hook is not set as executable.

waitingForEditor
Print a message to the terminal whenever Git is waiting for editor input from the user.

nestedTag
Advice shown if a user attempts to recursively tag a tag object.

submoduleAlternateErrorStrategyDie
Advice shown when a submodule.alternateErrorStrategy option configured to "die" causes a fatal error.

addIgnoredFile
Advice shown if a user attempts to add an ignored file to the index.

addEmptyPathspec
Advice shown if a user runs the add command without providing the pathspec parameter.

updateSparsePath
Advice shown when either git-add[1] or git-rm[1] is asked to update index entries outside the current sparse checkout.

core.fileMode
Tells Git if the executable bit of files in the working tree is to be honored.

Some filesystems lose the executable bit when a file that is marked as executable is checked out, or checks out a non-executable file with executable bit on. git-clone[1] or git-init[1] probe the filesystem to see if it handles the executable bit correctly and this variable is automatically set as necessary.

A repository, however, may be on a filesystem that handles the filemode correctly, and this variable is set to true when created, but later may be made accessible from another environment that loses the filemode (e.g. exporting ext4 via CIFS mount, visiting a Cygwin created repository with Git for Windows or Eclipse). In such a case it may be necessary to set this variable to false. See git-update-index[1].

The default is true (when core.filemode is not specified in the config file).

core.hideDotFiles
(Windows-only) If true, mark newly-created directories and files whose name starts with a dot as hidden. If dotGitOnly, only the .git/ directory is hidden, but no other files starting with a dot. The default mode is dotGitOnly.

core.ignoreCase
Internal variable which enables various workarounds to enable Git to work better on filesystems that are not case sensitive, like APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing finds "makefile" when Git expects "Makefile", Git will assume it is really the same file, and continue to remember it as "Makefile".

The default is false, except git-clone[1] or git-init[1] will probe and set core.ignoreCase true if appropriate when the repository is created.

Git relies on the proper configuration of this variable for your operating and file system. Modifying this value may result in unexpected behavior.

core.precomposeUnicode
This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.

core.protectHFS
If set to true, do not allow checkout of paths that would be considered equivalent to .git on an HFS+ filesystem. Defaults to true on Mac OS, and false elsewhere.

core.protectNTFS
Se definido como true, não permite a verificação de caminhos que possam causar problemas com o sistema de arquivos NTFS, por exemplo, conflito com nomes "curtos" 8.3. O padrão é trueno Windows e falseem outros lugares.

core.fsmonitor
Se definido, o valor desta variável é usado como um comando que identificará todos os arquivos que podem ter sido alterados desde a data/hora solicitada. Essas informações são usadas para acelerar o git, evitando o processamento desnecessário de arquivos que não foram alterados. Veja a seção "fsmonitor-watchman" de githooks[5] .

core.fsmonitorHookVersion
Define a versão do gancho que deve ser usada ao chamar o fsmonitor. Existem atualmente as versões 1 e 2. Quando isso não estiver definido, a versão 2 será tentada primeiro e, se falhar, a versão 1 será tentada. A versão 1 usa um carimbo de data/hora como entrada para determinar quais arquivos têm alterações desde aquele momento, mas alguns monitores como watchman têm condições de corrida quando usados ​​com um carimbo de data/hora. A versão 2 usa uma string opaca para que o monitor possa retornar algo que possa ser usado para determinar quais arquivos foram alterados sem condições de corrida.

core.trustctime
Se false, as diferenças de ctime entre o índice e a árvore de trabalho são ignoradas; útil quando o tempo de alteração do inode é modificado regularmente por algo fora do Git (rastreadores do sistema de arquivos e alguns sistemas de backup). Veja git-update-index[1] . Verdadeiro por padrão.

core.splitIndex
Se true, o recurso de índice dividido do índice será usado. Veja git-update-index[1] . Falso por padrão.

core.untrackedCache
Determina o que fazer sobre o recurso de cache não rastreado do índice. Ela será mantida, se esta variável não estiver definida ou definida como keep. Ele será adicionado automaticamente se definido como true. E ele será removido automaticamente, se definido como false. Antes de configurá-lo para true, você deve verificar se o mtime está funcionando corretamente em seu sistema. Veja git-update-index[1] . keeppor padrão, a menos que feature.manyFilesesteja ativado, o que define essa configuração como truepadrão.

core.checkStat
Quando ausente ou está definido como default, muitos campos na estrutura de estatísticas são verificados para detectar se um arquivo foi modificado desde que o Git o olhou. Quando esta variável de configuração é definida como minimal, parte sub-segundo de mtime e ctime, o uid e o gid do proprietário do arquivo, o número do inode (e o número do dispositivo, se o Git foi compilado para usá-lo), são excluídos do verifique entre esses campos, deixando apenas o segundo inteiro de mtime (e ctime, se core.trustCtime estiver definido) e o tamanho do arquivo a ser verificado.

Existem implementações do Git que não deixam valores utilizáveis ​​em alguns campos (eg JGit); ao excluir esses campos da comparação, o minimalmodo pode ajudar na interoperabilidade quando o mesmo repositório é usado por esses outros sistemas ao mesmo tempo.

core.quotePath
Comandos que geram caminhos (por exemplo , ls-files , diff ), citarão caracteres "incomuns" no nome do caminho colocando o nome do caminho entre aspas duplas e escapando esses caracteres com barras invertidas da mesma forma que C escapa caracteres de controle (por exemplo \t, para TAB, \npara LF, \\para barra invertida) ou bytes com valores maiores que 0x80 (por exemplo, octal \302\265para "micro" em UTF-8). Se esta variável for definida como false, bytes maiores que 0x80 não serão mais considerados "incomuns". Aspas duplas, barra invertida e caracteres de controle são sempre escapados, independentemente da configuração dessa variável. Um caractere de espaço simples não é considerado "incomum". Muitos comandos podem produzir nomes de caminho completamente textuais usando a -zopção. O valor padrão é verdadeiro.

core.eol
Define o tipo de final de linha a ser usado no diretório de trabalho para arquivos marcados como texto (por ter o text atributo definido ou por ter text=autoo Git detectando automaticamente o conteúdo como texto). As alternativas são lf , crlf e native , que usa a terminação de linha nativa da plataforma. O valor padrão é native. Veja gitattributes[5] para mais informações sobre conversão de fim de linha. Observe que esse valor será ignorado se core.autocrlf estiver definido como trueou input.

core.safecrlf
Se true, faz com que o Git verifique se a conversão CRLFé reversível quando a conversão de fim de linha está ativa. O Git verificará se um comando modifica um arquivo na árvore de trabalho direta ou indiretamente. Por exemplo, confirmar um arquivo seguido de fazer check-out do mesmo arquivo deve produzir o arquivo original na árvore de trabalho. Se este não for o caso da configuração atual de core.autocrlf, o Git rejeitará o arquivo. A variável pode ser definida como "warn", caso em que o Git apenas avisará sobre uma conversão irreversível, mas continuará a operação.

A conversão CRLF tem uma pequena chance de corromper os dados. Quando ativado, o Git converterá CRLF em LF durante o commit e LF em CRLF durante o checkout. Um arquivo que contém uma mistura de LF e CRLF antes do commit não pode ser recriado pelo Git. Para arquivos de texto, esta é a coisa certa a fazer: corrige os finais de linha de forma que tenhamos apenas os finais de linha LF no repositório. Mas para arquivos binários que são acidentalmente classificados como texto, a conversão pode corromper os dados.

Se você reconhecer essa corrupção antecipadamente, poderá corrigi-la facilmente definindo o tipo de conversão explicitamente em .gitattributes. Logo após o commit, você ainda tem o arquivo original em sua árvore de trabalho e este arquivo ainda não está corrompido. Você pode dizer explicitamente ao Git que este arquivo é binário e o Git tratará o arquivo apropriadamente.

Infelizmente, o efeito desejado de limpar arquivos de texto com finais de linha mistos e o efeito indesejado de corromper arquivos binários não podem ser distinguidos. Em ambos os casos, os CRLFs são removidos de forma irreversível. Para arquivos de texto, isso é a coisa certa a fazer porque CRLFs são terminações de linha, enquanto para arquivos binários, a conversão de CRLFs corrompe os dados.

Observe que essa verificação de segurança não significa que um checkout gerará um arquivo idêntico ao arquivo original para uma configuração diferente de core.eole core.autocrlf, mas apenas para o atual. Por exemplo, um arquivo de texto com LFseria aceito com core.eol=lf e poderia ser retirado posteriormente com core.eol=crlf, caso em que o arquivo resultante conteria CRLF, embora o arquivo original contivesse LF. No entanto, em ambas as árvores de trabalho, as terminações de linha seriam consistentes, ou seja, all LFou all CRLF, mas nunca misturadas. Um arquivo com finais de linha mistos seria relatado pelo core.safecrlf mecanismo.

core.autocrlf
Definir essa variável como "true" é o mesmo que definir o textatributo como "auto" em todos os arquivos e core.eol como "crlf". Defina como true se desejar ter CRLFterminações de linha em seu diretório de trabalho e o repositório tiver terminações de linha LF. Essa variável pode ser definida como input , caso em que nenhuma conversão de saída é executada.

core.checkRoundtripEncoding
Uma lista de codificações separadas por vírgula e/ou espaço em branco que o Git executa verificações de ida e volta UTF-8 se elas são usadas em um working-tree-encodingatributo (consulte gitattributes[5] ). O valor padrão é SHIFT-JIS.

core.symlinks
Se falso, os links simbólicos são verificados como pequenos arquivos simples que contêm o texto do link. git-update-index[1] e git-add[1] não alterarão o tipo gravado para arquivo normal. Útil em sistemas de arquivos como FAT que não suportam links simbólicos.

O padrão é true, exceto que git-clone[1] ou git-init[1] testará e definirá core.symlinks false se apropriado quando o repositório for criado.

core.gitProxy
Um "comando proxy" para executar (como comando host port ) em vez de estabelecer conexão direta com o servidor remoto ao usar o protocolo Git para buscar. Se o valor da variável estiver no formato "COMMAND for DOMAIN", o comando será aplicado apenas em nomes de host que terminam com a string de domínio especificada. Essa variável pode ser definida várias vezes e é correspondida na ordem fornecida; a primeira partida vence.

Pode ser substituído pela GIT_PROXY_COMMANDvariável de ambiente (que sempre se aplica universalmente, sem o tratamento especial "for").

A string especial nonepode ser usada como o comando proxy para especificar que nenhum proxy seja usado para um determinado padrão de domínio. Isso é útil para excluir servidores dentro de um firewall do uso de proxy, enquanto o padrão é um proxy comum para domínios externos.

comando core.ssh
Se esta variável for definida, git fetche git pushusará o comando especificado em vez de sshquando precisar se conectar a um sistema remoto. O comando está no mesmo formato que a GIT_SSH_COMMANDvariável de ambiente e é substituído quando a variável de ambiente é definida.

core.ignoreStat
Se true, o Git evitará usar chamadas lstat() para detectar se os arquivos foram alterados definindo o bit "assume-unchanged" para os arquivos rastreados que foram atualizados de forma idêntica no índice e na árvore de trabalho.

Quando os arquivos são modificados fora do Git, o usuário precisará preparar os arquivos modificados explicitamente (por exemplo, consulte a seção Exemplos em git-update-index[1] ). O Git normalmente não detectará alterações nesses arquivos.

Isso é útil em sistemas onde as chamadas lstat() são muito lentas, como CIFS/Microsoft Windows.

Falso por padrão.

core.preferSymlinkRefs
Em vez do formato "symref" padrão para HEAD e outros arquivos de referência simbólicos, use links simbólicos. Isso às vezes é necessário para trabalhar com scripts antigos que esperam que HEAD seja um link simbólico.

core.alternateRefsCommand
When advertising tips of available history from an alternate, use the shell to execute the specified command instead of git-for-each-ref[1]. The first argument is the absolute path of the alternate. Output must contain one hex object id per line (i.e., the same as produced by git for-each-ref --format='%(objectname)').

Note that you cannot generally put git for-each-ref directly into the config value, as it does not take a repository path as an argument (but you can wrap the command above in a shell script).

core.alternateRefsPrefixes
When listing references from an alternate, list only references that begin with the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref[1]. To list multiple prefixes, separate them with whitespace. If core.alternateRefsCommand is set, setting core.alternateRefsPrefixes has no effect.

core.bare
If true this repository is assumed to be bare and has no working directory associated with it. If this is the case a number of commands that require a working directory will be disabled, such as git-add[1] or git-merge[1].

This setting is automatically guessed by git-clone[1] or git-init[1] when the repository was created. By default a repository that ends in "/.git" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).

core.worktree
Set the path to the root of the working tree. If GIT_COMMON_DIR environment variable is set, core.worktree is ignored and not used for determining the root of working tree. This can be overridden by the GIT_WORK_TREE environment variable and the --work-tree command-line option. The value can be an absolute path or relative to the path to the .git directory, which is either specified by --git-dir or GIT_DIR, or automatically discovered. If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE and core.worktree is specified, the current working directory is regarded as the top level of your working tree.

Note that this variable is honored even when set in a configuration file in a ".git" subdirectory of a directory and its value differs from the latter directory (e.g. "/path/to/.git/config" has core.worktree set to "/different/path"), which is most likely a misconfiguration. Running Git commands in the "/path/to" directory will still use "/different/path" as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository’s usual working tree).

core.logAllRefUpdates
Enable the reflog. Updates to a ref <ref> is logged to the file "$GIT_DIR/logs/<ref>", by appending the new and old SHA-1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to true, missing "$GIT_DIR/logs/<ref>" file is automatically created for branch heads (i.e. under refs/heads/), remote refs (i.e. under refs/remotes/), note refs (i.e. under refs/notes/), and the symbolic ref HEAD. If it is set to always, then a missing reflog is automatically created for any ref under refs/.

This information can be used to determine what commit was the tip of a branch "2 days ago".

This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.

core.repositoryFormatVersion
Internal variable identifying the repository format and layout version.

core.sharedRepository
When group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When all (or world or everybody), the repository will be readable by all users, additionally to being group-shareable. When umask (or false), Git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal number, files in the repository will have this mode value. 0xxx will override user’s umask value (whereas the other options will only override requested parts of the user’s umask value). Examples: 0660 will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to group unless umask is e.g. 0022). 0640 is a repository that is group-readable but not group-writable. See git-init[1]. False by default.

core.warnAmbiguousRefs
If true, Git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the repository. True by default.

core.compression
An integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as core.looseCompression and pack.compression.

core.looseCompression
An integer -1..9, indicating the compression level for objects that are not in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to 1 (best speed).

core.packedGitWindowSize
Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system’s memory manager, but may improve performance when accessing a large number of large pack files.

Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value.

Common unit suffixes of k, m, or g are supported.

core.packedGitLimit
Maximum number of bytes to map simultaneously into memory from pack files. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process.

Default is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.

Common unit suffixes of k, m, or g are supported.

core.deltaBaseCacheLimit
Maximum number of bytes per thread to reserve for caching base objects that may be referenced by multiple deltified objects. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times.

Default is 96 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.

Common unit suffixes of k, m, or g are supported.

core.bigFileThreshold
Files larger than this size are stored deflated, without attempting delta compression. Storing large files without delta compression avoids excessive memory usage, at the slight expense of increased disk usage. Additionally files larger than this size are always treated as binary.

Default is 512 MiB on all platforms. This should be reasonable for most projects as source code and other text files can still be delta compressed, but larger binary media files won’t be.

Common unit suffixes of k, m, or g are supported.

core.excludesFile
Specifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, in addition to .gitignore (per-directory) and .git/info/exclude. Defaults to $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore[5].

core.askPass
Some commands (e.g. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable. Can be overridden by the GIT_ASKPASS environment variable. If not set, fall back to the value of the SSH_ASKPASS environment variable or, failing that, a simple password prompt. The external program shall be given a suitable prompt as command-line argument and write the password on its STDOUT.

core.attributesFile
In addition to .gitattributes (per-directory) and .git/info/attributes, Git looks into this file for attributes (see gitattributes[5]). Path expansions are made the same way as for core.excludesFile. Its default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/attributes is used instead.

core.hooksPath
By default Git will look for your hooks in the $GIT_DIR/hooks directory. Set this to different path, e.g. /etc/git/hooks, and Git will try to find your hooks in that directory, e.g. /etc/git/hooks/pre-receive instead of in $GIT_DIR/hooks/pre-receive.

The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the "DESCRIPTION" section of githooks[5]).

This configuration variable is useful in cases where you’d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an init.templateDir where you’ve changed default hooks.

core.editor
Commands such as commit and tag that let you edit messages by launching an editor use the value of this variable when it is set, and the environment variable GIT_EDITOR is not set. See git-var[1].

core.commentChar
Commands such as commit and tag that let you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default #).

If set to "auto", git-commit would select a character that is not the beginning character of any line in existing commit messages.

core.filesRefLockTimeout
The length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms).

core.packedRefsTimeout
The length of time, in milliseconds, to retry when trying to lock the packed-refs file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).

core.pager
Text viewer for use by Git commands (e.g., less). The value is meant to be interpreted by the shell. The order of preference is the $GIT_PAGER environment variable, then core.pager configuration, then $PAGER, and then the default chosen at compile time (usually less).

Quando a LESSvariável de ambiente não está definida, o Git a define como FRX (se LESSa variável de ambiente estiver definida, o Git não a altera). Se você deseja substituir seletivamente a configuração padrão do Git para LESS, você pode definir, core.pagerpor exemplo , less -S. Isso será passado para o shell pelo Git, que traduzirá o comando final para LESS=FRX less -S. O ambiente não define a Sopção, mas a linha de comando sim, instruindo menos a truncar linhas longas. Da mesma forma, definir core.pagerpara less -+Fdesativará a Fopção especificada pelo ambiente na linha de comando, desativando o comportamento "sair se uma tela" do less. Pode-se ativar especificamente alguns sinalizadores para comandos específicos: por exemplo, configurando pager.blameparaless -Shabilita o truncamento de linha apenas para git blame.

Da mesma forma, quando a LVvariável de ambiente não está definida, o Git a define como -c. Você pode substituir essa configuração exportando LVcom outro valor ou configuração core.pagerpara lv +c.

core.whitespace
Uma lista separada por vírgulas de problemas comuns de espaço em branco a serem observados. git diff usará color.diff.whitespacepara destacá-los, e git apply --whitespace=error irá considerá-los como erros. Você pode prefixar -para desabilitar qualquer um deles (por exemplo -trailing-space):

blank-at-eoltrata os espaços em branco à direita no final da linha como um erro (ativado por padrão).

space-before-tabtrata um caractere de espaço que aparece imediatamente antes de um caractere de tabulação na parte de recuo inicial da linha como um erro (ativado por padrão).

indent-with-non-tabtrata uma linha recuada com caracteres de espaço em vez das guias equivalentes como um erro (não ativado por padrão).

tab-in-indenttrata um caractere de tabulação na parte inicial do recuo da linha como um erro (não ativado por padrão).

blank-at-eoftrata as linhas em branco adicionadas no final do arquivo como um erro (ativado por padrão).

trailing-spaceé uma abreviação para cobrir tanto blank-at-eole blank-at-eof.

cr-at-eoltrata um retorno de carro no final da linha como parte do terminador de linha, ou seja, com ele, trailing-space não é acionado se o caractere antes de tal retorno de carro não for um espaço em branco (não habilitado por padrão).

tabwidth=<n>informa quantas posições de caracteres uma guia ocupa; isso é relevante para indent-with-non-tabe quando o Git corrige tab-in-indent erros. A largura padrão da guia é 8. Os valores permitidos são de 1 a 63.

core.fsyncObjectFiles
Este booleano habilitará o fsync() ao escrever arquivos de objetos.

Isso é uma perda total de tempo e esforço em um sistema de arquivos que ordena as gravações de dados corretamente, mas pode ser útil para sistemas de arquivos que não usam journalling (sistemas de arquivos UNIX tradicionais) ou que apenas registram metadados e não o conteúdo do arquivo (OS X's HFS+, ou Linux ext3 com "data=writeback").

core.preloadIndex
Habilite o pré-carregamento de índice paralelo para operações como git diff

Isso pode acelerar operações como git diff e git status, especialmente em sistemas de arquivos como NFS que têm uma semântica de cache fraca e, portanto, latências de E/S relativamente altas. Quando habilitado, o Git fará a comparação do índice com os dados do sistema de arquivos em paralelo, permitindo a sobreposição de E/S. O padrão é verdadeiro.

core.unsetenvvars
Somente Windows: lista separada por vírgulas de nomes de variáveis ​​de ambiente que precisam ser desativadas antes de gerar qualquer outro processo. O padrão é levar PERL5LIBem conta o fato de que o Git for Windows insiste em usar seu próprio interpretador Perl.

core.restrictinheritedhandles
Somente Windows: substitua se os processos gerados herdam apenas os identificadores de arquivo padrão ( stdin, stdoute stderr) ou todos os identificadores. Pode ser auto, trueou false. O padrão é auto, o que significa trueno Windows 7 e posterior e falseem versões mais antigas do Windows.

core.createObject
Você pode definir isso como link , caso em que um hardlink seguido por uma exclusão da origem é usado para garantir que a criação de objetos não sobrescreva objetos existentes.

Em algumas combinações de sistema de arquivos/sistema operacional, isso não é confiável. Defina esta configuração para renomear lá; No entanto, isso removerá a verificação que garante que os arquivos de objeto existentes não sejam substituídos.

core.notesRef
Ao mostrar mensagens de commit, mostre também notas que estão armazenadas na referência dada. O ref deve ser totalmente qualificado. Se a referência fornecida não existir, não é um erro, mas significa que nenhuma nota deve ser impressa.

Essa configuração padrão é "refs/notes/commits" e pode ser substituída pela GIT_NOTES_REFvariável de ambiente. Veja git-notes[1] .

core.commitGraph
Se for true, então o git lerá o arquivo commit-graph (se existir) para analisar a estrutura gráfica dos commits. O padrão é verdadeiro. Veja git-commit-graph[1] para mais informações.

core.useReplaceRefs
Se definido como false, comporte-se como se a --no-replace-objects opção fosse fornecida na linha de comando. Veja git[1] e git-replace[1] para mais informações.

core.multiPackIndex
Use o arquivo de índice de vários pacotes para rastrear vários arquivos de pacote usando um único índice. Veja git-multi-pack-index[1] para mais informações. O padrão é verdadeiro.

core.sparseCheckout
Ative o recurso "checkout esparso". Veja git-sparse-checkout[1] para mais informações.

core.sparseCheckoutCone
Enables the "cone mode" of the sparse checkout feature. When the sparse-checkout file contains a limited set of patterns, then this mode provides significant performance advantages. See git-sparse-checkout[1] for more information.

core.abbrev
Set the length object names are abbreviated to. If unspecified or set to "auto", an appropriate value is computed based on the approximate number of packed objects in your repository, which hopefully is enough for abbreviated object names to stay unique for some time. If set to "no", no abbreviation is made and the object names are shown in their full length. The minimum length is 4.

add.ignoreErrors
add.ignore-errors (deprecated)
Tells git add to continue adding files when some files cannot be added due to indexing errors. Equivalent to the --ignore-errors option of git-add[1]. add.ignore-errors is deprecated, as it does not follow the usual naming convention for configuration variables.

add.interactive.useBuiltin
[EXPERIMENTAL] Set to true to use the experimental built-in implementation of the interactive version of git-add[1] instead of the Perl script version. Is false by default.

alias.*
Command aliases for the git[1] command wrapper - e.g. after defining alias.last = cat-file commit HEAD, the invocation git last is equivalent to git cat-file commit HEAD. To avoid confusion and troubles with script usage, aliases that hide existing Git commands are ignored. Arguments are split by spaces, the usual shell quoting and escaping is supported. A quote pair or a backslash can be used to quote them.

Note that the first word of an alias does not necessarily have to be a command. It can be a command-line option that will be passed into the invocation of git. In particular, this is useful when used with -c to pass in one-time configurations or -p to force pagination. For example, loud-rebase = -c commit.verbose=true rebase can be defined such that running git loud-rebase would be equivalent to git -c commit.verbose=true rebase. Also, ps = -p status would be a helpful alias since git ps would paginate the output of git status where the original command does not.

If the alias expansion is prefixed with an exclamation point, it will be treated as a shell command. For example, defining alias.new = !gitk --all --not ORIG_HEAD, the invocation git new is equivalent to running the shell command gitk --all --not ORIG_HEAD. Note that shell commands will be executed from the top-level directory of a repository, which may not necessarily be the current directory. GIT_PREFIX is set as returned by running git rev-parse --show-prefix from the original current directory. See git-rev-parse[1].

am.keepcr
If true, git-am will call git-mailsplit for patches in mbox format with parameter --keep-cr. In this case git-mailsplit will not remove \r from lines ending with \r\n. Can be overridden by giving --no-keep-cr from the command line. See git-am[1], git-mailsplit[1].

am.threeWay
By default, git am will fail if the patch does not apply cleanly. When set to true, this setting tells git am to fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally (equivalent to giving the --3way option from the command line). Defaults to false. See git-am[1].

apply.ignoreWhitespace
When set to change, tells git apply to ignore changes in whitespace, in the same way as the --ignore-space-change option. When set to one of: no, none, never, false tells git apply to respect all whitespace differences. See git-apply[1].

apply.whitespace
Tells git apply how to handle whitespaces, in the same way as the --whitespace option. See git-apply[1].

blame.blankBoundary
Show blank commit object name for boundary commits in git-blame[1]. This option defaults to false.

blame.coloring
This determines the coloring scheme to be applied to blame output. It can be repeatedLines, highlightRecent, or none which is the default.

blame.date
Specifies the format used to output dates in git-blame[1]. If unset the iso format is used. For supported values, see the discussion of the --date option at git-log[1].

blame.showEmail
Show the author email instead of author name in git-blame[1]. This option defaults to false.

blame.showRoot
Do not treat root commits as boundaries in git-blame[1]. This option defaults to false.

blame.ignoreRevsFile
Ignore revisions listed in the file, one unabbreviated object name per line, in git-blame[1]. Whitespace and comments beginning with # are ignored. This option may be repeated multiple times. Empty file names will reset the list of ignored revisions. This option will be handled before the command line option --ignore-revs-file.

blame.markUnblamableLines
Mark lines that were changed by an ignored revision that we could not attribute to another commit with a * in the output of git-blame[1].

blame.markIgnoredLines
Mark lines that were changed by an ignored revision that we attributed to another commit with a ? in the output of git-blame[1].

branch.autoSetupMerge
Diz ao git branch , git switch e git checkout para configurar novos branches para que git-pull[1] seja mesclado apropriadamente do branch do ponto de partida. Observe que, mesmo que essa opção não esteja definida, esse comportamento pode ser escolhido por filial usando as opções --track e --no-track. As configurações válidas são: false — nenhuma configuração automática é feita; true — a configuração automática é feita quando o ponto de partida é uma filial de rastreamento remoto; always — a configuração automática é feita quando o ponto de partida é uma filial local ou uma filial de rastreamento remoto; inherit — se o ponto de partida tiver uma configuração de rastreamento, ele será copiado para a nova ramificação. Esta opção tem como padrão true.

branch.autoSetupRebase
Quando um novo branch é criado com git branch , git switch ou git checkout que rastreia outro branch, essa variável diz ao Git para configurar pull para rebase em vez de merge (veja "branch.<name>.rebase"). Quando never, o rebase nunca é definido automaticamente como true. Quando local, o rebase é definido como true para ramificações rastreadas de outras ramificações locais. Quando remote, rebase é definido como true para ramificações rastreadas de ramificações de rastreamento remoto. Quando always, o rebase será definido como true para todas as ramificações de rastreamento. Consulte "branch.autoSetupMerge" para obter detalhes sobre como configurar uma ramificação para rastrear outra ramificação. Esta opção é padronizada para nunca.

branch.sort
Esta variável controla a ordenação de ramificações quando exibida por git-branch[1] . Sem a opção "--sort=<value>" fornecida, o valor dessa variável será usado como padrão. Veja nomes de campo git-for-each-ref[1] para valores válidos.

branch.<name>.remote
Quando no branch <name>, ele diz ao git fetch e ao git push para qual remoto buscar/enviar. O controle remoto para o qual enviar pode ser substituído remote.pushDefault(para todas as ramificações). O controle remoto para o qual enviar, para a ramificação atual, pode ser substituído por branch.<name>.pushRemote. Se nenhum controle remoto estiver configurado, ou se você não estiver em nenhuma ramificação, o padrão é originpara buscar e remote.pushDefaultenviar. Além disso, .(um ponto) é o repositório local atual (um repositório de ponto), veja branch.<name>.mergea nota final de 's abaixo.

branch.<name>.pushRemote
Quando no branch <name>, ele substitui branch.<name>.remotepor push. Ele também substitui remote.pushDefaulto push do branch <name>. Quando você puxa de um lugar (por exemplo, seu upstream) e envia para outro (por exemplo, seu próprio repositório de publicação), você deseja definir remote.pushDefaultpara especificar o remoto para enviar para todas as ramificações e usar esta opção para substituí-lo por um ramo.

branch.<name>.merge
Define, junto com branch.<name>.remote, o branch upstream para o branch fornecido. Ele diz ao git fetch / git pull / git rebase qual branch deve ser mesclado e também pode afetar o git push (veja push.default). Quando no branch <name>, ele diz ao git fetch que o refspec padrão deve ser marcado para mesclagem em FETCH_HEAD. O valor é tratado como a parte remota de um refspec e deve corresponder a um ref que é obtido do controle remoto fornecido por "branch.<name>.remote". As informações de mesclagem são usadas por git pull (que inicialmente chama git fetch ) para pesquisar a ramificação padrão para mesclagem. Sem esta opção, git pullpadrões para mesclar o primeiro refspec buscado. Especifique vários valores para obter uma mesclagem de polvo. Se você deseja configurar o git pull para que ele seja mesclado em <name> de outro branch no repositório local, você pode apontar branch.<name>.merge para o branch desejado e usar a configuração de caminho relativo .(um ponto) para branch .<nome>.remote.

branch.<name>.mergeOptions
Define as opções padrão para mesclagem na ramificação <nome>. A sintaxe e as opções suportadas são as mesmas de git-merge[1] , mas os valores de opção contendo caracteres de espaço em branco não são suportados atualmente.

branch.<nome>.rebase
Quando true, rebase o branch <name> no topo do branch buscado, em vez de mesclar o branch padrão do remoto padrão quando "git pull" é executado. Consulte "pull.rebase" para fazer isso de maneira não específica de ramificação.

Quando merges(ou apenas m ), passe a --rebase-mergesopção para git rebase para que os commits de merge locais sejam incluídos no rebase (veja git-rebase[1] para detalhes).

Quando o valor é interactive(ou apenas i ), o rebase é executado no modo interativo.

NOTA : esta é uma operação possivelmente perigosa; não use a menos que você entenda as implicações (veja git -rebase[1] para detalhes).

branch.<name>.description
Descrição da filial, pode ser editada com git branch --edit-description. A descrição da filial é adicionada automaticamente na carta de apresentação do patch de formato ou no resumo da solicitação.

navegador.<ferramenta>.cmd
Especifique o comando para invocar o navegador especificado. O comando especificado é avaliado no shell com as URLs passadas como argumentos. (Veja git-web--browse[1] .)

navegador.<ferramenta>.caminho
Substitua o caminho para a ferramenta fornecida que pode ser usada para navegar na ajuda HTML (consulte -wa opção em git-help[1] ) ou um repositório de trabalho no gitweb (consulte git-instaweb[1] ).

checkout.defaultRemote
Quando você executa git checkout <something> ou git switch <something>e tem apenas um controle remoto, ele pode implicitamente retornar ao check-out e rastreamento, por exemplo origin/<something>. Isso para de funcionar assim que você tiver mais de um controle remoto com uma <something> referência. Esta configuração permite definir o nome de um controle remoto preferencial que sempre deve vencer quando se trata de desambiguação. O caso de uso típico é definir isso como origin.

Atualmente, isso é usado por git-switch[1] e git-checkout[1] quando git checkout <something> ou git switch <something> fará check-out da <something>ramificação em outro controle remoto, e por git-worktree[1] quando git worktree addse refere a uma ramificação remota. Essa configuração pode ser usada para outros comandos ou funcionalidades semelhantes a check-out no futuro.

checkout.divis
Fornece o valor padrão para a opção --guessou em e . Veja git-switch[1] e git-checkout[1] .--no-guessgit checkoutgit switch

checkout.workers
O número de trabalhadores paralelos a serem usados ​​ao atualizar a árvore de trabalho. O padrão é um, ou seja, execução sequencial. Se definido com um valor menor que um, o Git usará tantos trabalhadores quanto o número de núcleos lógicos disponíveis. Essa configuração checkout.thresholdForParallelismafeta todos os comandos que realizam o checkout. Por exemplo, check-out, clone, reset, check-out esparso, etc.

Observação: o checkout paralelo geralmente oferece melhor desempenho para repositórios localizados em SSDs ou em NFS. Para repositórios em discos giratórios e/ou máquinas com um pequeno número de núcleos, o check-out sequencial padrão geralmente funciona melhor. O tamanho e o nível de compactação de um repositório também podem influenciar o desempenho da versão paralela.

checkout.thresholdForParallelism
Ao executar o check-out paralelo com um pequeno número de arquivos, o custo de geração de subprocessos e comunicação entre processos pode superar os ganhos de paralelização. Esta configuração permite definir o número mínimo de arquivos para os quais o checkout paralelo deve ser tentado. O padrão é 100.

clean.requireForce
Um booleano para fazer com que o git-clean não faça nada, a menos que seja dado -f, -i ou -n. O padrão é verdadeiro.

clone.defaultRemoteName
O nome do controle remoto a ser criado ao clonar um repositório. O padrão é origin, e pode ser substituído passando a --originopção de linha de comando para git-clone[1] .

clone.rejectShallow
Rejeitar para clonar um repositório se for superficial, pode ser substituído passando a opção --reject-shallowna linha de comando. Veja git-clone[1]

conselho.cor
Um booleano para ativar/desativar a cor nas dicas (por exemplo, quando um push falhou, consulte advice.*uma lista). Pode ser definido como always, false(ou never) ou auto(ou true), neste caso as cores são usadas somente quando a saída de erro vai para um terminal. Se não estiver definido, o valor de color.uié usado ( autopor padrão).

color.advice.hint
Use cores personalizadas para dicas.

color.blame.highlightRecente
Specify the line annotation color for git blame --color-by-age depending upon the age of the line.

This setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored with the specified colors if the line was introduced before the given timestamp, overwriting older timestamped colors.

Instead of an absolute timestamp relative timestamps work as well, e.g. 2.weeks.ago is valid to address anything older than 2 weeks.

It defaults to blue,12 month ago,white,1 month ago,red, which colors everything older than one year blue, recent changes between one month and one year old are kept white, and lines introduced within the last month are colored red.

color.blame.repeatedLines
Use the specified color to colorize line annotations for git blame --color-lines, if they come from the same commit as the preceding line. Defaults to cyan.

color.branch
A boolean to enable/disable color in the output of git-branch[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).

color.branch.<slot>
Use customized color for branch coloration. <slot> is one of current (the current branch), local (a local branch), remote (a remote-tracking branch in refs/remotes/), upstream (upstream tracking branch), plain (other refs).

color.diff
Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-diff[1], git-log[1], and git-show[1] will use color for all patches. If it is set to true or auto, those commands will only use color when output is to the terminal. If unset, then the value of color.ui is used (auto by default).

This does not affect git-format-patch[1] or the git-diff-* plumbing commands. Can be overridden on the command line with the --color[=<when>] option.

color.diff.<slot>
Use customized color for diff colorization. <slot> specifies which part of the patch to use the specified color, and is one of context (context text - plain is a historical synonym), meta (metainformation), frag (hunk header), func (function in hunk header), old (removed lines), new (added lines), commit (commit headers), whitespace (highlighting whitespace errors), oldMoved (deleted lines), newMoved (added lines), oldMovedDimmed, oldMovedAlternative, oldMovedAlternativeDimmed, newMovedDimmed, newMovedAlternative newMovedAlternativeDimmed (See the <mode> setting of --color-moved in git-diff[1] for details), contextDimmed, oldDimmed, newDimmed, contextBold, oldBold, and newBold (see git-range-diff[1] for details).

color.decorate.<slot>
Use customized color for git log --decorate output. <slot> is one of branch, remoteBranch, tag, stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively and grafted for grafted commits.

color.grep
When set to always, always highlight matches. When false (or never), never. When set to true or auto, use color only when the output is written to the terminal. If unset, then the value of color.ui is used (auto by default).

color.grep.<slot>
Use customized color for grep colorization. <slot> specifies which part of the line to use the specified color, and is one of

context
texto não correspondente em linhas de contexto (ao usar -A, -Bou -C)

filename
prefixo do nome do arquivo (quando não estiver usando -h)

function
linhas de nome de função (ao usar -p)

lineNumber
prefixo do número da linha (ao usar -n)

column
prefixo do número da coluna (ao usar --column)

match
texto correspondente (o mesmo que configuração matchContexte matchSelected)

matchContext
texto correspondente em linhas de contexto

matchSelected
texto correspondente nas linhas selecionadas. Além disso, usado para personalizar os seguintes subcomandos git-log[1]--grep : , --authore --committer.

selected
texto não correspondente nas linhas selecionadas. Além disso, usado para personalizar os seguintes subcomandos git-log[1]--grep : , --authore --committer.

separator
separadores entre campos em uma linha ( :, -, e =) e entre blocos ( --)

cor.interativo
Quando definido como always, sempre use cores para prompts e exibições interativos (como os usados ​​por "git-add --interactive" e "git-clean --interactive"). Quando falso (ou never), nunca. Quando definido como trueou auto, use cores somente quando a saída for para o terminal. Se não estiver definido, o valor de color.uié usado ( autopor padrão).

color.interactive.<slot>
Use cores personalizadas para git add --interactive e git clean --interactive output. <slot>pode ser prompt, header, help ou error, para quatro tipos distintos de saída normal de comandos interativos.

color.pager
Um booleano para especificar se os automodos de cor devem colorir a saída que vai para o pager. O padrão é verdadeiro; defina como false se o seu pager não entender os códigos de cores ANSI.

color.push
Um booleano para habilitar/desabilitar a cor em erros de push. Pode ser definido como always, false(ou never) ou auto(ou true), neste caso as cores são usadas somente quando a saída de erro vai para um terminal. Se não estiver definido, o valor de color.uié usado ( autopor padrão).

color.push.error
Use cores personalizadas para erros de envio.

color.remoto
Se definido, as palavras-chave no início da linha são realçadas. As palavras-chave são "error", "warning", "hint" e "success" e não diferenciam maiúsculas de minúsculas. Pode ser definido como always, false(ou never) ou auto(ou true). Se não estiver definido, o valor de color.uié usado ( autopor padrão).

color.remote.<slot>
Use cores personalizadas para cada palavra-chave remota. <slot>podem ser hint, warningou que correspondem à palavra-chave correspondente success.error

color.showBranch
A boolean to enable/disable color in the output of git-show-branch[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).

color.status
A boolean to enable/disable color in the output of git-status[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).

color.status.<slot>
Use customized color for status colorization. <slot> is one of header (the header text of the status message), added or updated (files which are added but not committed), changed (files which are changed but not added in the index), untracked (files which are not tracked by Git), branch (the current branch), nobranch (the color the no branch warning is shown in, defaulting to red), localBranch or remoteBranch (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or unmerged (files which have unmerged changes).

color.transport
A boolean to enable/disable color when pushes are rejected. May be set to always, false (or never) or auto (or true), in which case colors are used only when the error output goes to a terminal. If unset, then the value of color.ui is used (auto by default).

color.transport.rejected
Use customized color when a push was rejected.

color.ui
This variable determines the default value for variables such as color.diff and color.grep that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the --color option. Set it to false or never if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the --color option. Set it to always if you want all output not intended for machine consumption to use color, to true or auto (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.

column.ui
Specify whether supported commands should output in columns. This variable consists of a list of tokens separated by spaces or commas:

Essas opções controlam quando o recurso deve ser ativado (o padrão é never ):

always
sempre mostrar em colunas

never
nunca mostrar em colunas

auto
mostre em colunas se a saída é para o terminal

Essas opções controlam o layout (o padrão é coluna ). Definir qualquer um desses implica sempre se nenhum de always , never ou auto for especificado.

column
preencher colunas antes de linhas

row
preencher linhas antes de colunas

plain
mostrar em uma coluna

Por fim, essas opções podem ser combinadas com uma opção de layout (o padrão é nodeense ):

dense
faça colunas de tamanhos desiguais para utilizar mais espaço

nodense
fazer colunas de tamanho igual

coluna.ramo
Especifique se a listagem de ramificações deve ser gerada git branchem colunas. Veja column.uipara detalhes.

coluna.limpar
Especifique o layout ao listar itens em git clean -i, que sempre mostra arquivos e diretórios em colunas. Veja column.uipara detalhes.

coluna.status
Especifique se os arquivos não rastreados devem ser enviados git statusem colunas. Veja column.uipara detalhes.

coluna.tag
Especifique se a listagem de tags deve ser gerada git tagem colunas. Veja column.uipara detalhes.

commit.cleanup
Essa configuração substitui o padrão da --cleanupopção em git commit. Veja git-commit[1] para detalhes. Alterar o padrão pode ser útil quando você sempre deseja manter as linhas que começam com o caractere de comentário #em sua mensagem de log, nesse caso você faria git config commit.cleanup whitespace(observe que você mesmo terá que remover as linhas de ajuda que começam #no modelo de log de confirmação, se você fizer isto).

commit.gpgSign
Um booleano para especificar se todos os commits devem ser assinados com GPG. O uso dessa opção ao realizar operações como rebase pode resultar na assinatura de um grande número de commits. Pode ser conveniente usar um agente para evitar digitar sua senha GPG várias vezes.

status.commit.
Um booleano para ativar/desativar a inclusão de informações de status no modelo de mensagem de confirmação ao usar um editor para preparar a mensagem de confirmação. O padrão é verdadeiro.

commit.model
Especifique o nome do caminho de um arquivo a ser usado como modelo para novas mensagens de confirmação.

commit.verbose
Um booleano ou int para especificar o nível de verbose com git commit. Veja git-commit[1] .

commitGraph.generationVersion
Especifica o tipo de versão do número de geração a ser usado ao gravar ou ler o arquivo de gráfico de confirmação. Se a versão 1 for especificada, as datas de confirmação corrigidas não serão gravadas ou lidas. Padrões para 2.

commitGraph.maxNewFilters
Especifica o valor padrão para a --max-new-filtersopção de git commit-graph write(cf, git-commit-graph[1] ).

commitGraph.readChangedPaths
Se true, o git usará os filtros Bloom de caminho alterado no arquivo de gráfico de confirmação (se existir, e eles estiverem presentes). O padrão é verdadeiro. Veja git-commit-graph[1] para mais informações.

credencial.ajudante
Especifique um auxiliar externo a ser chamado quando uma credencial de nome de usuário ou senha for necessária; o auxiliar pode consultar o armazenamento externo para evitar solicitar ao usuário as credenciais. Normalmente é o nome de um auxiliar de credencial com argumentos possíveis, mas também pode ser um caminho absoluto com argumentos ou, se precedido por !, comandos shell.

Observe que vários auxiliares podem ser definidos. Veja gitcredentials[7] para detalhes e exemplos.

credential.useHttpPath
Ao adquirir credenciais, considere importante o componente "caminho" de uma URL http ou https. O padrão é falso. Veja gitcredentials[7] para mais informações.

credencial.nome de usuário
If no username is set for a network authentication, use this username by default. See credential.<context>.* below, and gitcredentials[7].

credential.<url>.*
Any of the credential.* options above can be applied selectively to some credentials. For example "credential.https://example.com.username" would set the default username only for https connections to example.com. See gitcredentials[7] for details on how URLs are matched.

credentialCache.ignoreSIGHUP
Tell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting.

credentialStore.lockTimeoutMS
The length of time, in milliseconds, for git-credential-store to retry when trying to lock the credentials file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1s).

completion.commands
This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with - will remove it from the existing list.

diff.autoRefreshIndex
When using git diff to compare with work tree files, do not consider stat-only change as changed. Instead, silently run git update-index --refresh to update the cached stat information for paths whose contents in the work tree match the contents in the index. This option defaults to true. Note that this affects only git diff Porcelain, and not lower level diff commands such as git diff-files.

diff.dirstat
A comma separated list of --dirstat parameters specifying the default behavior of the --dirstat option to git-diff[1] and friends. The defaults can be overridden on the command line (using --dirstat=<param1,param2,...>). The fallback defaults (when not changed by diff.dirstat) are changes,noncumulative,3. The following parameters are available:

changes
Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.

lines
Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.

files
Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.

cumulative
Count changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.

<limit>
An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.

Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: files,10,cumulative.

diff.statGraphWidth
Limit the width of the graph part in --stat output. If set, applies to all commands generating --stat output except format-patch.

diff.context
Generate diffs with <n> lines of context instead of the default of 3. This value is overridden by the -U option.

diff.interHunkContext
Show the context between diff hunks, up to the specified number of lines, thereby fusing the hunks that are close to each other. This value serves as the default for the --inter-hunk-context command line option.

diff.external
If this config variable is set, diff generation is not performed using the internal diff machinery, but using the given command. Can be overridden with the ‘GIT_EXTERNAL_DIFF’ environment variable. The command is called with parameters as described under "git Diffs" in git[1]. Note: if you want to use an external diff program only on a subset of your files, you might want to use gitattributes[5] instead.

diff.ignoreSubmodules
Sets the default value of --ignore-submodules. Note that this affects only git diff Porcelain, and not lower level diff commands such as git diff-files. git checkout and git switch also honor this setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is overridden by using the --ignore-submodules command-line option. The git submodule commands are not affected by this setting. By default this is set to untracked so that any untracked submodules are ignored.

diff.mnemonicPrefix
If set, git diff uses a prefix pair that is different from the standard "a/" and "b/" depending on what is being compared. When this configuration is in effect, reverse diff output also swaps the order of the prefixes:

git diff
compares the (i)ndex and the (w)ork tree;

git diff HEAD
compares a (c)ommit and the (w)ork tree;

git diff --cached
compares a (c)ommit and the (i)ndex;

git diff HEAD:file1 file2
compares an (o)bject and a (w)ork tree entity;

git diff --no-index a b
compares two non-git things (1) and (2).

diff.noprefix
If set, git diff does not show any source or destination prefix.

diff.relative
If set to true, git diff does not show changes outside of the directory and show pathnames relative to the current directory.

diff.orderFile
File indicating how to order files within a diff. See the -O option to git-diff[1] for details. If diff.orderFile is a relative pathname, it is treated as relative to the top of the working tree.

diff.renameLimit
The number of files to consider in the exhaustive portion of copy/rename detection; equivalent to the git diff option -l. If not set, the default value is currently 1000. This setting has no effect if rename detection is turned off.

diff.renames
Whether and how Git detects renames. If set to "false", rename detection is disabled. If set to "true", basic rename detection is enabled. If set to "copies" or "copy", Git will detect copies, as well. Defaults to true. Note that this affects only git diff Porcelain like git-diff[1] and git-log[1], and not lower level commands such as git-diff-files[1].

diff.suppressBlankEmpty
A boolean to inhibit the standard behavior of printing a space before each empty output line. Defaults to false.

diff.submodule
Specify the format in which differences in submodules are shown. The "short" format just shows the names of the commits at the beginning and end of the range. The "log" format lists the commits in the range like git-submodule[1] summary does. The "diff" format shows an inline diff of the changed contents of the submodule. Defaults to "short".

diff.wordRegex
A POSIX Extended Regular Expression used to determine what is a "word" when performing word-by-word difference calculations. Character sequences that match the regular expression are "words", all other characters are ignorable whitespace.

diff.<driver>.command
The custom diff driver command. See gitattributes[5] for details.

diff.<driver>.xfuncname
The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See gitattributes[5] for details.

diff.<driver>.binary
Set this option to true to make the diff driver treat files as binary. See gitattributes[5] for details.

diff.<driver>.textconv
The command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See gitattributes[5] for details.

diff.<driver>.wordRegex
The regular expression that the diff driver should use to split words in a line. See gitattributes[5] for details.

diff.<driver>.cachetextconv
Set this option to true to make the diff driver cache the text conversion outputs. See gitattributes[5] for details.

diff.tool
Controls which diff tool is used by git-difftool[1]. This variable overrides the value configured in merge.tool. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<tool>.cmd variable is defined.

diff.guitool
Controls which diff tool is used by git-difftool[1] when the -g/--gui flag is specified. This variable overrides the value configured in merge.guitool. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<guitool>.cmd variable is defined.

araxis

bc

comparação de código

deltawalker

difundir

difuso

emergir

emergir

examediff

guiffy

gvimdiff

kdiff3

comparar

fundir

nvimdiff

aberto

p4merge

fundir

tkdiff

vimdiff

winmerge

xxdiff

diff.indentHeurística
Defina esta opção para falsedesabilitar a heurística padrão que muda os limites do diff hunk para facilitar a leitura dos patches.

algoritmo diff
Escolha um algoritmo de comparação. As variantes são as seguintes:

default,myers
O algoritmo básico de diferenças gananciosas. Atualmente, este é o padrão.

minimal
Gaste tempo extra para garantir que o menor diferencial possível seja produzido.

patience
Use o algoritmo "paciência diff" ao gerar patches.

histogram
Este algoritmo estende o algoritmo de paciência para "suportar elementos comuns de baixa ocorrência".

diff.wsErrorHighlight
Realce erros de espaço em branco nas contextlinhas ou do diff old. newVários valores são separados por vírgula, noneredefine os valores anteriores, defaultredefine a lista para newe allé um atalho para old,new,context. Os erros de espaço em branco são coloridos com color.diff.whitespace. A opção de linha de comando --ws-error-highlight=<kind> substitui essa configuração.

diff.colorMovido
Se definido como um <mode>valor válido ou verdadeiro, as linhas movidas em um diff são coloridas de forma diferente, para detalhes de modos válidos veja --color-moved em git-diff[1] . Se simplesmente definido como true, o modo de cor padrão será usado. Quando definido como false, as linhas movidas não são coloridas.

diff.colorMovedWS
Quando as linhas movidas são coloridas usando, por exemplo, a diff.colorMovedconfiguração, esta opção controla <mode>como os espaços são tratados para detalhes de modos válidos, veja --color-moved-ws em git-diff[1] .

difftool.<tool>.path
Substitua o caminho para a ferramenta fornecida. Isso é útil caso sua ferramenta não esteja no PATH.

difftool.<tool>.cmd
Especifique o comando para invocar a ferramenta de comparação especificada. O comando especificado é avaliado no shell com as seguintes variáveis ​​disponíveis: LOCAL é definido como o nome do arquivo temporário que contém o conteúdo da pré-imagem do diff e REMOTE é definido como o nome do arquivo temporário que contém o conteúdo do post do diff -imagem.

difftool.prompt
Avisar antes de cada invocação da ferramenta diff.

extensions.objectFormat
Especifique o algoritmo de hash a ser usado. Os valores aceitáveis ​​são sha1e sha256. Se não especificado, sha1é assumido. É um erro especificar esta chave a menos que core.repositoryFormatVersionseja 1.

Observe que essa configuração deve ser definida apenas por git-init[1] ou git-clone[1] . Tentar alterá-lo após a inicialização não funcionará e produzirá problemas difíceis de diagnosticar.

fastimport.unpackLimit
Se o número de objetos importados por git-fast-import[1] estiver abaixo desse limite, os objetos serão descompactados em arquivos de objetos soltos. No entanto, se o número de objetos importados for igual ou superior a esse limite, o pacote será armazenado como um pacote. Armazenar o pacote de uma importação rápida pode tornar a operação de importação mais rápida, especialmente em sistemas de arquivos lentos. Se não estiver definido, o valor de transfer.unpackLimitserá usado.

funcionalidade.*
As configurações que começam com feature.modificam os padrões de um grupo de outras configurações. Esses grupos são criados pela comunidade de desenvolvedores do Git como padrões recomendados e estão sujeitos a alterações. Em particular, novas opções de configuração podem ser adicionadas com diferentes padrões.

recurso.experimental
Habilite as opções de configuração que são novas no Git e estão sendo consideradas para padrões futuros. As configurações incluídas aqui podem ser adicionadas ou removidas a cada versão, incluindo atualizações de versões secundárias. Essas configurações podem ter interações não intencionais, pois são muito novas. Ative esta configuração se estiver interessado em fornecer comentários sobre recursos experimentais. Os novos valores padrão são:

fetch.negotiationAlgorithm=skippingpode melhorar os tempos de negociação de busca pulando mais commits por vez, reduzindo o número de idas e voltas.

feature.manyFiles
Habilite as opções de configuração que otimizam para repositórios com muitos arquivos no diretório de trabalho. Com muitos arquivos, comandos como git statuse git checkoutpodem ser lentos e esses novos padrões melhoram o desempenho:

index.version=4habilita a compactação de prefixo de caminho no índice.

core.untrackedCache=truehabilita o cache não rastreado. Esta configuração assume que mtime está funcionando em sua máquina.

fetch.recurseSubmodules
Esta opção controla se git fetch(e a busca subjacente em git pull) buscará recursivamente em submódulos preenchidos. Essa opção pode ser definida como um valor booleano ou sob demanda . Defini-lo como um booleano altera o comportamento de fetch e pull para recursão incondicionalmente em submódulos quando definido como verdadeiro ou para não recursão quando definido como falso. Quando definido como on-demand , fetch e pull só serão recursivamente em um submódulo preenchido quando seu superprojeto recuperar um commit que atualiza a referência do submódulo. O padrão é on-demand , ou o valor de submodule.recurse se definido.

fetch.fsckObjects
Se estiver definido como true, o git-fetch-pack verificará todos os objetos buscados. Veja transfer.fsckObjectso que foi verificado. O padrão é falso. Se não estiver definido, o valor de transfer.fsckObjectsserá usado.

fetch.fsck.<msg-id>
Funciona como fsck.<msg-id>, mas é usado por git-fetch-pack[1] em vez de git-fsck[1] . Consulte a fsck.<msg-id>documentação para obter detalhes.

fetch.fsck.skipList
Funciona como fsck.skipList, mas é usado por git-fetch-pack[1] em vez de git-fsck[1] . Consulte a fsck.skipListdocumentação para obter detalhes.

fetch.unpackLimit
If the number of objects fetched over the Git native transfer is below this limit, then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of transfer.unpackLimit is used instead.

fetch.prune
If true, fetch will automatically behave as if the --prune option was given on the command line. See also remote.<name>.prune and the PRUNING section of git-fetch[1].

fetch.pruneTags
If true, fetch will automatically behave as if the refs/tags/*:refs/tags/* refspec was provided when pruning, if not set already. This allows for setting both this option and fetch.prune to maintain a 1=1 mapping to upstream refs. See also remote.<name>.pruneTags and the PRUNING section of git-fetch[1].

fetch.output
Control how ref update status is printed. Valid values are full and compact. Default value is full. See section OUTPUT in git-fetch[1] for detail.

fetch.negotiationAlgorithm
Control how information about the commits in the local repository is sent when negotiating the contents of the packfile to be sent by the server. Set to "skipping" to use an algorithm that skips commits in an effort to converge faster, but may result in a larger-than-necessary packfile; or set to "noop" to not send any information at all, which will almost certainly result in a larger-than-necessary packfile, but will skip the negotiation step. The default is "default" which instructs Git to use the default algorithm that never skips commits (unless the server has acknowledged it or one of its descendants). If feature.experimental is enabled, then this setting defaults to "skipping". Unknown values will cause git fetch to error out.

Veja também as opções --negotiate-onlye para git-fetch[1] .--negotiation-tip

fetch.showForcedUpdates
Defina como false para ativar --no-show-forced-updatesnos comandos git-fetch[1] e git-pull[1] . O padrão é verdadeiro.

buscar.paralelo
Especifica o número máximo de operações de busca a serem executadas em paralelo por vez (submódulos ou remotos quando a --multipleopção git-fetch[1] estiver em vigor).

Um valor de 0 fornecerá algum padrão razoável. Se não estiver definido, o padrão é 1.

Para submódulos, essa configuração pode ser substituída usando a submodule.fetchJobs configuração config.

fetch.writeCommitGraph
Defina como true para escrever um gráfico de confirmação após cada git fetchcomando que baixa um arquivo de pacote de um controle remoto. Usando a --splitopção, a maioria das execuções criará um arquivo de gráfico de confirmação muito pequeno em cima do(s) arquivo(s) de gráfico de confirmação existente. Ocasionalmente, esses arquivos serão mesclados e a gravação pode demorar mais. Ter um arquivo de gráfico de confirmação atualizado ajuda no desempenho de muitos comandos do Git, incluindo git merge-base, git push -fe git log --graph. O padrão é falso.

formato.anexar
Habilite anexos multipart/mixed como padrão para format-patch . O valor também pode ser uma string entre aspas duplas que habilitará anexos como padrão e definirá o valor como o limite. Veja a opção --attach em git-format-patch[1] .

formato.de
Fornece o valor padrão para a --fromopção format-patch. Aceita um valor booleano ou um nome e endereço de e-mail. Se for false, format-patch assume como padrão --no-from, usando autores de commit diretamente no campo "From:" dos e-mails de patch. Se for true, format-patch assume como padrão --from, usando sua identidade de committer no campo "De:" de emails de patch e incluindo um campo "De:" no corpo do email de patch, se for diferente. Se definido como um valor não booleano, format-patch usa esse valor em vez de sua identidade de committer. O padrão é falso.

formato.numerado
Um booleano que pode habilitar ou desabilitar números de sequência em assuntos de patch. O padrão é "auto", que o habilita somente se houver mais de um patch. Ele pode ser ativado ou desativado para todas as mensagens, definindo-o como "true" ou "false". Veja a opção --numbered em git-format-patch[1] .

format.headers
Cabeçalhos de e-mail adicionais a serem incluídos em um patch a ser enviado por e-mail. Veja git-format-patch[1] .

format.to
formato.cc
Destinatários adicionais a serem incluídos em um patch a ser enviado pelo correio. Veja as opções --to e --cc em git-format-patch[1] .

format.subjectPrefix
O padrão para format-patch é enviar arquivos com o prefixo de assunto [PATCH] . Use esta variável para alterar esse prefixo.

format.coverFromDescription
O modo padrão para format-patch para determinar quais partes da carta de apresentação serão preenchidas usando a descrição da filial. Veja a --cover-from-descriptionopção em git-format-patch[1] .

formato.assinatura
O padrão para format-patch é gerar uma assinatura contendo o número da versão do Git. Use esta variável para alterar esse padrão. Defina esta variável para a string vazia ("") para suprimir a geração de assinatura.

format.signatureFile
Funciona exatamente como format.signature, exceto que o conteúdo do arquivo especificado por esta variável será usado como assinatura.

formato.sufixo
O padrão para format-patch é gerar arquivos com o sufixo .patch. Use esta variável para alterar esse sufixo (certifique-se de incluir o ponto, se desejar).

format.encodeEmailHeaders
Encode email headers that have non-ASCII characters with "Q-encoding" (described in RFC 2047) for email transmission. Defaults to true.

format.pretty
The default pretty format for log/show/whatchanged command, See git-log[1], git-show[1], git-whatchanged[1].

format.thread
The default threading style for git format-patch. Can be a boolean value, or shallow or deep. shallow threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the --in-reply-to, and the first patch mail, in this order. deep threading makes every mail a reply to the previous one. A true boolean value is the same as shallow, and a false value disables threading.

format.signOff
A boolean value which lets you enable the -s/--signoff option of format-patch by default. Note: Adding the Signed-off-by trailer to a patch should be a conscious act and means that you certify you have the rights to submit this work under the same open source license. Please see the SubmittingPatches document for further discussion.

format.coverLetter
A boolean that controls whether to generate a cover-letter when format-patch is invoked, but in addition can be set to "auto", to generate a cover-letter only when there’s more than one patch. Default is false.

format.outputDirectory
Set a custom directory to store the resulting files instead of the current working directory. All directory components will be created.

format.filenameMaxLength
The maximum length of the output filenames generated by the format-patch command; defaults to 64. Can be overridden by the --filename-max-length=<n> command line option.

format.useAutoBase
A boolean value which lets you enable the --base=auto option of format-patch by default. Can also be set to "whenAble" to allow enabling --base=auto if a suitable base is available, but to skip adding base info otherwise without the format dying.

format.notes
Provides the default value for the --notes option to format-patch. Accepts a boolean value, or a ref which specifies where to get notes. If false, format-patch defaults to --no-notes. If true, format-patch defaults to --notes. If set to a non-boolean value, format-patch defaults to --notes=<ref>, where ref is the non-boolean value. Defaults to false.

If one wishes to use the ref ref/notes/true, please use that literal instead.

This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple --[no-]notes[=] options passed in. That is, a value of true will show the default notes, a value of <ref> will also show notes from that notes ref and a value of false will negate previous configurations and not show notes.

For example,

[format]
	notes = true
	notes = foo
	notes = false
	notes = bar
will only show notes from refs/notes/bar.

filter.<driver>.clean
The command which is used to convert the content of a worktree file to a blob upon checkin. See gitattributes[5] for details.

filtro.<driver>.mancha
O comando que é usado para converter o conteúdo de um objeto blob em um arquivo de árvore de trabalho no check-out. Veja gitattributes[5] para detalhes.

fsck.<msg-id>
Durante o fsck, o git pode encontrar problemas com dados legados que não seriam gerados pelas versões atuais do git e que não seriam enviados pela rede se transfer.fsckObjectsestivessem configurados. Esse recurso destina-se a dar suporte ao trabalho com repositórios legados que contêm esses dados.

A configuração fsck.<msg-id>será escolhida por git-fsck[1] , mas para aceitar pushs desse conjunto de dados receive.fsck.<msg-id>, ou para cloná-lo ou buscá-lo, set fetch.fsck.<msg-id>.

O restante da documentação discute fsck.*a brevidade, mas o mesmo se aplica aos arquivos receive.fsck.*e fetch.<msg-id>.*. variáveis.

Ao contrário de variáveis ​​como color.uie core.editoras variáveis receive.fsck.<msg-id>e fetch.fsck.<msg-id>não retornarão à fsck.<msg-id>configuração se não estiverem definidas. Para configurar uniformemente as mesmas configurações do fsck em diferentes circunstâncias, todos os três devem definir os mesmos valores.

Quando fsck.<msg-id>está definido, os erros podem ser alternados para avisos e vice-versa, definindo a fsck.<msg-id>configuração em que <msg-id>é o ID da mensagem fsck e o valor é um de error, warnou ignore. Por conveniência, o fsck prefixa o erro/aviso com o ID da mensagem, por exemplo, "missingEmail: linha de autor/committer inválida - e-mail ausente" significa que a configuração fsck.missingEmail = ignore ocultará esse problema.

Em geral, é melhor enumerar objetos existentes com problemas com fsck.skipList, em vez de listar os tipos de quebras que esses objetos problemáticos compartilham para serem ignorados, pois isso permitirá que novas instâncias das mesmas quebras passem despercebidas.

Definir um fsck.<msg-id>valor desconhecido fará com que o fsck morra, mas fazer o mesmo para receive.fsck.<msg-id>e fetch.fsck.<msg-id> só fará com que o git avise.

fsck.skipList
O caminho para uma lista de nomes de objetos (ou seja, um SHA-1 não abreviado por linha) que são conhecidos por serem quebrados de maneira não fatal e devem ser ignorados. Nas versões do Git 2.20 e posteriores, comentários ( # ), linhas vazias e qualquer espaço em branco à esquerda e à direita são ignorados. Tudo, exceto um SHA-1 por linha, apresentará erros em versões mais antigas.

Esse recurso é útil quando um projeto estabelecido deve ser aceito apesar de commits iniciais contendo erros que podem ser ignorados com segurança, como endereços de e-mail de committer inválidos. Nota: objetos corrompidos não podem ser ignorados com esta configuração.

Como fsck.<msg-id>esta variável tem correspondentes receive.fsck.skipListe fetch.fsck.skipListvariantes.

Ao contrário de variáveis ​​como color.uie core.editoras variáveis receive.fsck.skipListe fetch.fsck.skipListnão retornarão à fsck.skipListconfiguração se não estiverem definidas. Para configurar uniformemente as mesmas configurações do fsck em diferentes circunstâncias, todos os três devem definir os mesmos valores.

Versões mais antigas do Git (antes de 2.20) documentaram que a lista de nomes de objetos deve ser classificada. Isso nunca foi um requisito, os nomes dos objetos podem aparecer em qualquer ordem, mas ao ler a lista, rastreamos se a lista foi classificada para fins de uma implementação de pesquisa binária interna, o que poderia economizar algum trabalho com uma lista já classificada. A menos que você tivesse uma lista enorme, não havia razão para sair do seu caminho para pré-ordenar a lista. Após a versão 2.20 do Git, uma implementação de hash é usada, então agora não há motivo para pré-ordenar a lista.

gc.aggressiveDepth
O parâmetro de profundidade usado no algoritmo de compactação delta usado por git gc --aggressive . O padrão é 50, que é o padrão para a --depthopção quando --aggressivenão está em uso.

See the documentation for the --depth option in git-repack[1] for more details.

gc.aggressiveWindow
The window size parameter used in the delta compression algorithm used by git gc --aggressive. This defaults to 250, which is a much more aggressive window size than the default --window of 10.

See the documentation for the --window option in git-repack[1] for more details.

gc.auto
When there are approximately more than this many loose objects in the repository, git gc --auto will pack them. Some Porcelain commands use this command to perform a light-weight garbage collection from time to time. The default value is 6700.

Setting this to 0 disables not only automatic packing based on the number of loose objects, but any other heuristic git gc --auto will otherwise use to determine if there’s work to do, such as gc.autoPackLimit.

gc.autoPackLimit
When there are more than this many packs that are not marked with *.keep file in the repository, git gc --auto consolidates them into one larger pack. The default value is 50. Setting this to 0 disables it. Setting gc.auto to 0 will also disable this.

See the gc.bigPackThreshold configuration variable below. When in use, it’ll affect how the auto pack limit works.

gc.autoDetach
Make git gc --auto return immediately and run in background if the system supports it. Default is true.

gc.bigPackThreshold
If non-zero, all packs larger than this limit are kept when git gc is run. This is very similar to --keep-largest-pack except that all packs that meet the threshold are kept, not just the largest pack. Defaults to zero. Common unit suffixes of k, m, or g are supported.

Note that if the number of kept packs is more than gc.autoPackLimit, this configuration variable is ignored, all packs except the base pack will be repacked. After this the number of packs should go below gc.autoPackLimit and gc.bigPackThreshold should be respected again.

If the amount of memory estimated for git repack to run smoothly is not available and gc.bigPackThreshold is not set, the largest pack will also be excluded (this is the equivalent of running git gc with --keep-largest-pack).

gc.writeCommitGraph
If true, then gc will rewrite the commit-graph file when git-gc[1] is run. When using git gc --auto the commit-graph will be updated if housekeeping is required. Default is true. See git-commit-graph[1] for details.

gc.logExpiry
If the file gc.log exists, then git gc --auto will print its content and exit with status zero instead of running unless that file is more than gc.logExpiry old. Default is "1.day". See gc.pruneExpire for more ways to specify its value.

gc.packRefs
Running git pack-refs in a repository renders it unclonable by Git versions prior to 1.5.1.2 over dumb transports such as HTTP. This variable determines whether git gc runs git pack-refs. This can be set to notbare to enable it within all non-bare repos or it can be set to a boolean value. The default is true.

gc.pruneExpire
When git gc is run, it will call prune --expire 2.weeks.ago. Override the grace period with this config variable. The value "now" may be used to disable this grace period and always prune unreachable objects immediately, or "never" may be used to suppress pruning. This feature helps prevent corruption when git gc runs concurrently with another process writing to the repository; see the "NOTES" section of git-gc[1].

gc.worktreePruneExpire
When git gc is run, it calls git worktree prune --expire 3.months.ago. This config variable can be used to set a different grace period. The value "now" may be used to disable the grace period and prune $GIT_DIR/worktrees immediately, or "never" may be used to suppress pruning.

gc.reflogExpire
gc.<pattern>.reflogExpire
git reflog expire removes reflog entries older than this time; defaults to 90 days. The value "now" expires all entries immediately, and "never" suppresses expiration altogether. With "<pattern>" (e.g. "refs/stash") in the middle the setting applies only to the refs that match the <pattern>.

gc.reflogExpireUnreachable
gc.<pattern>.reflogExpireUnreachable
git reflog expire remove entradas de reflog mais antigas que este tempo e não são alcançáveis ​​a partir da dica atual; padrão de 30 dias. O valor "agora" expira todas as entradas imediatamente e "nunca" suprime completamente a expiração. Com "<pattern>" (por exemplo, "refs/stash") no meio, a configuração se aplica apenas aos refs que correspondem ao <pattern>.

Esses tipos de entradas geralmente são criados como resultado do uso de git commit --amendou git rebasee são os commits anteriores à ocorrência da alteração ou rebase. Como essas alterações não fazem parte do projeto atual, a maioria dos usuários desejará expirar mais cedo, e é por isso que o padrão é mais agressivo do que gc.reflogExpire.

gc.rerereResolvido
Os registros de mesclagem conflitante que você resolveu anteriormente são mantidos por tantos dias quando o git rerere gc é executado. Você também pode usar "1.mês.ago" mais legível por humanos. O padrão é 60 dias. Veja git-rerere[1] .

gc.rerereNão resolvido
Registros de mesclagem conflitante que você não resolveu são mantidos por tantos dias quando o git rerere gc é executado. Você também pode usar "1.mês.ago" mais legível por humanos. O padrão é 15 dias. Veja git-rerere[1] .

gitcvs.commitMsgAnnotation
Anexe essa string a cada mensagem de confirmação. Defina como string vazia para desativar esse recurso. O padrão é "via emulador git-CVS".

gitcvs.enabled
Se a interface do servidor CVS está habilitada para este repositório. Veja git-cvsserver[1] .

gitcvs.logFile
Caminho para um arquivo de log onde a interface do servidor CVS bem... registra várias coisas. Veja git-cvsserver[1] .

gitcvs.usecrlfattr
Se true, o servidor procurará os atributos de conversão de fim de linha para arquivos para determinar os -kmodos a serem usados. Se os atributos forçarem o Git a tratar um arquivo como texto, o -kmodo será deixado em branco para que os clientes CVS o tratem como texto. Se eles suprimirem a conversão de texto, o arquivo será configurado com o modo -kb , que suprime qualquer alteração de nova linha que o cliente possa fazer. Se os atributos não permitirem que o tipo de arquivo seja determinado, então gitcvs.allBinaryé usado. Veja gitattributes[5] .

gitcvs.allBinary
Isso é usado se gitcvs.usecrlfattrnão resolver o modo -kb correto a ser usado. Se true, todos os arquivos não resolvidos são enviados ao cliente no modo -kb . Isso faz com que o cliente os trate como arquivos binários, o que suprime qualquer nova linha que possa ser alterada. Como alternativa, se estiver definido como "adivinha", o conteúdo do arquivo será examinado para decidir se é binário, semelhante a core.autocrlf.

gitcvs.dbName
Banco de dados usado pelo git-cvsserver para armazenar em cache as informações de revisão derivadas do repositório Git. O significado exato depende do driver de banco de dados usado, para SQLite (que é o driver padrão) este é um nome de arquivo. Suporta substituição de variáveis ​​(veja git-cvsserver[1] para detalhes). Não pode conter ponto e vírgula ( ;). Padrão: %Ggitcvs.%m.sqlite

gitcvs.dbDriver
Driver Perl DBI usado. Você pode especificar qualquer driver disponível para isso aqui, mas pode não funcionar. git-cvsserver é testado com DBD::SQLite , relatado para funcionar com DBD::Pg e relatado para não funcionar com DBD::mysql . Recurso experimental. Não pode conter dois pontos duplos ( :). Padrão: SQLite . Veja git-cvsserver[1] .

gitcvs.dbUser, gitcvs.dbPass
Usuário e senha do banco de dados. Útil apenas se estiver configurando gitcvs.dbDriver, pois o SQLite não tem conceito de usuários e/ou senhas do banco de dados. gitcvs.dbUser suporta substituição de variáveis ​​(veja git-cvsserver[1] para detalhes).

gitcvs.dbTableNamePrefix
Prefixo do nome da tabela de banco de dados. Anexado aos nomes de quaisquer tabelas de banco de dados usadas, permitindo que um único banco de dados seja usado para vários repositórios. Suporta substituição de variáveis ​​(veja git-cvsserver[1] para detalhes). Quaisquer caracteres não alfabéticos serão substituídos por sublinhados.

Todas as variáveis ​​gitcvs, exceto gitcvs.usecrlfattre gitcvs.allBinarytambém podem ser especificadas como gitcvs.<access_method>.<varname> (onde access_method é um entre "ext" e "pserver") para torná-las aplicáveis ​​apenas ao método de acesso fornecido.

gitweb.category
gitweb.description
proprietário.gitweb
gitweb.url
Veja gitweb[1] para descrição.

gitweb.avatar
gitweb.blame
gitweb.grep
gitweb.highlight
gitweb.patches
gitweb.pickaxe
gitweb.remote_heads
gitweb.showSizes
gitweb.snapshot
See gitweb.conf[5] for description.

grep.lineNumber
If set to true, enable -n option by default.

grep.column
If set to true, enable the --column option by default.

grep.patternType
Set the default matching behavior. Using a value of basic, extended, fixed, or perl will enable the --basic-regexp, --extended-regexp, --fixed-strings, or --perl-regexp option accordingly, while the value default will use the grep.extendedRegexp option to choose between basic and extended.

grep.extendedRegexp
If set to true, enable --extended-regexp option by default. This option is ignored when the grep.patternType option is set to a value other than default.

grep.threads
Number of grep worker threads to use. See grep.threads in git-grep[1] for more information.

grep.fallbackToNoIndex
If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository. Defaults to false.

gpg.program
Use this custom program instead of "gpg" found on $PATH when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, "gpg --verify $signature - <$file" is run, and the program is expected to signal a good signature by exiting with code 0, and to generate an ASCII-armored detached signature, the standard input of "gpg -bsau $key" is fed with the contents to be signed, and the program is expected to send the result to its standard output.

gpg.format
Specifies which key format to use when signing with --gpg-sign. Default is "openpgp". Other possible values are "x509", "ssh".

gpg.<format>.program
Use this to customize the program used for the signing format you chose. (see gpg.program and gpg.format) gpg.program can still be used as a legacy synonym for gpg.openpgp.program. The default value for gpg.x509.program is "gpgsm" and gpg.ssh.program is "ssh-keygen".

gpg.minTrustLevel
Specifies a minimum trust level for signature verification. If this option is unset, then signature verification for merge operations require a key with at least marginal trust. Other operations that perform signature verification require a key with at least undefined trust. Setting this option overrides the required trust-level for all operations. Supported values, in increasing order of significance:

undefined

never

marginal

fully

ultimate

gpg.ssh.defaultKeyCommand
This command that will be run when user.signingkey is not set and a ssh signature is requested. On successful exit a valid ssh public key is expected in the first line of its output. To automatically use the first available key from your ssh-agent set this to "ssh-add -L".

gpg.ssh.allowedSignersFile
A file containing ssh public keys which you are willing to trust. The file consists of one or more lines of principals followed by an ssh public key. e.g.: user1@example.com,user2@example.com ssh-rsa AAAAX1... See ssh-keygen(1) "ALLOWED SIGNERS" for details. The principal is only used to identify the key and is available when verifying a signature.

SSH has no concept of trust levels like gpg does. To be able to differentiate between valid signatures and trusted signatures the trust level of a signature verification is set to fully when the public key is present in the allowedSignersFile. Otherwise the trust level is undefined and git verify-commit/tag will fail.

This file can be set to a location outside of the repository and every developer maintains their own trust store. A central repository server could generate this file automatically from ssh keys with push access to verify the code against. In a corporate setting this file is probably generated at a global location from automation that already handles developer ssh keys.

A repository that only allows signed commits can store the file in the repository itself using a path relative to the top-level of the working tree. This way only committers with an already valid key can add or change keys in the keyring.

Since OpensSSH 8.8 this file allows specifying a key lifetime using valid-after & valid-before options. Git will mark signatures as valid if the signing key was valid at the time of the signatures creation. This allows users to change a signing key without invalidating all previously made signatures.

Using a SSH CA key with the cert-authority option (see ssh-keygen(1) "CERTIFICATES") is also valid.

gpg.ssh.revocationFile
Either a SSH KRL or a list of revoked public keys (without the principal prefix). See ssh-keygen(1) for details. If a public key is found in this file then it will always be treated as having trust level "never" and signatures will show as invalid.

gui.commitMsgWidth
Defines how wide the commit message window is in the git-gui[1]. "75" is the default.

gui.diffContext
Specifies how many context lines should be used in calls to diff made by the git-gui[1]. The default is "5".

gui.displayUntracked
Determines if git-gui[1] shows untracked files in the file list. The default is "true".

gui.encoding
Specifies the default character encoding to use for displaying of file contents in git-gui[1] and gitk[1]. It can be overridden by setting the encoding attribute for relevant files (see gitattributes[5]). If this option is not set, the tools default to the locale encoding.

gui.matchTrackingBranch
Determines if new branches created with git-gui[1] should default to tracking remote branches with matching names or not. Default: "false".

gui.newBranchTemplate
Is used as suggested name when creating new branches using the git-gui[1].

gui.pruneDuringFetch
"true" if git-gui[1] should prune remote-tracking branches when performing a fetch. The default value is "false".

gui.trustmtime
Determines if git-gui[1] should trust the file modification timestamp or not. By default the timestamps are not trusted.

gui.spellingDictionary
Specifies the dictionary used for spell checking commit messages in the git-gui[1]. When set to "none" spell checking is turned off.

gui.fastCopyBlame
If true, git gui blame uses -C instead of -C -C for original location detection. It makes blame significantly faster on huge repositories at the expense of less thorough copy detection.

gui.copyBlameThreshold
Specifies the threshold to use in git gui blame original location detection, measured in alphanumeric characters. See the git-blame[1] manual for more information on copy detection.

gui.blamehistoryctx
Specifies the radius of history context in days to show in gitk[1] for the selected commit, when the Show History Context menu item is invoked from git gui blame. If this variable is set to zero, the whole history is shown.

guitool.<name>.cmd
Especifica a linha de comando do shell a ser executada quando o item correspondente do menu git-gui[1] Tools é invocado. Esta opção é obrigatória para todas as ferramentas. O comando é executado a partir da raiz do diretório de trabalho, e no ambiente recebe o nome da ferramenta como GIT_GUITOOL, o nome do arquivo atualmente selecionado como FILENAME e o nome da ramificação atual como CUR_BRANCH (se o cabeçalho estiver desanexado , CUR_BRANCH está vazio).

guitool.<name>.needsFile
Execute a ferramenta somente se um diff estiver selecionado na GUI. Garante que FILENAME não está vazio.

guitool.<name>.noConsole
Execute o comando silenciosamente, sem criar uma janela para exibir sua saída.

guitool.<name>.noRescan
Não verifique novamente o diretório de trabalho em busca de alterações após a execução da ferramenta.

guitool.<name>.confirm
Mostre uma caixa de diálogo de confirmação antes de realmente executar a ferramenta.

guitool.<name>.argPrompt
Solicite um argumento de string do usuário e passe-o para a ferramenta por meio da ARGSvariável de ambiente. Como solicitar um argumento implica em confirmação, a opção confirm não tem efeito se estiver habilitada. Se a opção for definida como true , yes ou 1 , a caixa de diálogo usará um prompt genérico integrado; caso contrário, o valor exato da variável é usado.

guitool.<nome>.revPrompt
Solicite uma única revisão válida do usuário e defina a REVISIONvariável de ambiente. Em outros aspectos, essa opção é semelhante a argPrompt e pode ser usada em conjunto com ela.

guitool.<name>.revUnmerged
Mostre apenas ramificações não mescladas na subdiálogo revPrompt . Isso é útil para ferramentas semelhantes a mesclagem ou rebase, mas não para coisas como check-out ou redefinição.

guitool.<name>.title
Especifica o título a ser usado para a caixa de diálogo de prompt. O padrão é o nome da ferramenta.

guitool.<name>.prompt
Especifica a string de prompt geral a ser exibida na parte superior da caixa de diálogo, antes das subseções para argPrompt e revPrompt . O valor padrão inclui o comando real.

ajuda.navegador
Especifique o navegador que será usado para exibir a ajuda no formato da web . Veja git-help[1] .

formato.ajuda
Substitua o formato de ajuda padrão usado por git-help[1] . Os valores man , info , web e html são suportados. homem é o padrão. web e html são iguais.

ajuda.autocorreção
Se o git detectar erros de digitação e puder identificar exatamente um comando válido semelhante ao erro, o git tentará sugerir o comando correto ou até mesmo executar a sugestão automaticamente. Os valores de configuração possíveis são:

0 (padrão): mostra o comando sugerido.

número positivo: execute o comando sugerido após decisegundos especificados (0,1 seg).

"immediate": execute o comando sugerido imediatamente.

"prompt": mostra a sugestão e solicita a confirmação para executar o comando.

"never": não execute ou mostre qualquer comando sugerido.

help.htmlCaminho
Especifique o caminho onde reside a documentação HTML. Caminhos e URLs do sistema de arquivos são suportados. As páginas HTML serão prefixadas com este caminho quando a ajuda for exibida no formato da web . Esse padrão é o caminho da documentação da sua instalação do Git.

proxy HTTP
Substitua o proxy HTTP, normalmente configurado usando as variáveis ​​de ambiente http_proxy , https_proxy e all_proxy (consulte Recursos curl(1)). Além da sintaxe compreendida pelo curl, é possível especificar uma string de proxy com um nome de usuário, mas sem senha; nesse caso, o git tentará adquirir uma da mesma forma que faz para outras credenciais. Veja gitcredentials[7] para mais informações. A sintaxe, portanto, é [protocol://][user[:password]@]proxyhost[:port] . Isso pode ser substituído por controle remoto; veja remoto.<nome>.proxy

http.proxyAuthMethod
Set the method with which to authenticate against the HTTP proxy. This only takes effect if the configured proxy string contains a user name part (i.e. is of the form user@host or user@host:port). This can be overridden on a per-remote basis; see remote.<name>.proxyAuthMethod. Both can be overridden by the GIT_HTTP_PROXY_AUTHMETHOD environment variable. Possible values are:

anyauth - Automatically pick a suitable authentication method. It is assumed that the proxy answers an unauthenticated request with a 407 status code and one or more Proxy-authenticate headers with supported authentication methods. This is the default.

basic - HTTP Basic authentication

digest - HTTP Digest authentication; this prevents the password from being transmitted to the proxy in clear text

negotiate - GSS-Negotiate authentication (compare the --negotiate option of curl(1))

ntlm - NTLM authentication (compare the --ntlm option of curl(1))

http.proxySSLCert
The pathname of a file that stores a client certificate to use to authenticate with an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CERT environment variable.

http.proxySSLKey
The pathname of a file that stores a private key to use to authenticate with an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_KEY environment variable.

http.proxySSLCertPasswordProtected
Enable Git’s password prompt for the proxy SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED environment variable.

http.proxySSLCAInfo
Pathname to the file containing the certificate bundle that should be used to verify the proxy with when using an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CAINFO environment variable.

http.emptyAuth
Attempt authentication without seeking a username or password. This can be used to attempt GSS-Negotiate authentication without specifying a username in the URL, as libcurl normally requires a username for authentication.

http.delegation
Control GSSAPI credential delegation. The delegation is disabled by default in libcurl since version 7.21.7. Set parameter to tell the server what it is allowed to delegate when it comes to user credentials. Used with GSS/kerberos. Possible values are:

none - Don’t allow any delegation.

policy - Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of realm policy.

always - Unconditionally allow the server to delegate.

http.extraHeader
Pass an additional HTTP header when communicating with a server. If more than one such entry exists, all of them are added as extra headers. To allow overriding the settings inherited from the system config, an empty value will reset the extra headers to the empty list.

http.cookieFile
The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see curl(1)). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.

http.saveCookies
If set, store cookies received during requests to the file specified by http.cookieFile. Has no effect if http.cookieFile is unset.

http.version
Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Currently the possible values of this option are:

HTTP/2

HTTP/1.1

http.sslVersion
The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the CURLOPT_SSL_VERSION option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Currently the possible values of this option are:

sslv2

sslv3

tlsv1

tlsv1.0

tlsv1.1

tlsv1.2

tlsv1.3

Can be overridden by the GIT_SSL_VERSION environment variable. To force git to use libcurl’s default ssl version and ignore any explicit http.sslversion option, set GIT_SSL_VERSION to the empty string.

http.sslCipherList
A list of SSL ciphers to use when negotiating an SSL connection. The available ciphers depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the CURLOPT_SSL_CIPHER_LIST option; see the libcurl documentation for more details on the format of this list.

Can be overridden by the GIT_SSL_CIPHER_LIST environment variable. To force git to use libcurl’s default cipher list and ignore any explicit http.sslCipherList option, set GIT_SSL_CIPHER_LIST to the empty string.

http.sslVerify
Whether to verify the SSL certificate when fetching or pushing over HTTPS. Defaults to true. Can be overridden by the GIT_SSL_NO_VERIFY environment variable.

http.sslCert
File containing the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CERT environment variable.

http.sslKey
File containing the SSL private key when fetching or pushing over HTTPS. Can be overridden by the GIT_SSL_KEY environment variable.

http.sslCertPasswordProtected
Enable Git’s password prompt for the SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable.

http.sslCAInfo
File containing the certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable.

http.sslCAPath
Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CAPATH environment variable.

http.sslBackend
Name of the SSL backend to use (e.g. "openssl" or "schannel"). This option is ignored if cURL lacks support for choosing the SSL backend at runtime.

http.schannelCheckRevoke
Used to enforce or disable certificate revocation checks in cURL when http.sslBackend is set to "schannel". Defaults to true if unset. Only necessary to disable this if Git consistently errors and the message is about checking the revocation status of a certificate. This option is ignored if cURL lacks support for setting the relevant SSL option at runtime.

http.schannelUseSSLCAInfo
As of cURL v7.60.0, the Secure Channel backend can use the certificate bundle provided via http.sslCAInfo, but that would override the Windows Certificate Store. Since this is not desirable by default, Git will tell cURL not to use that bundle by default when the schannel backend was configured via http.sslBackend, unless http.schannelUseSSLCAInfo overrides this behavior.

http.pinnedpubkey
Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with sha256// followed by the base64 encoded sha256 hash of the public key. See also libcurl CURLOPT_PINNEDPUBLICKEY. git will exit with an error if this option is set but not supported by cURL.

http.sslTry
Attempt to use AUTH SSL/TLS and encrypted data transfers when connecting via regular FTP protocol. This might be needed if the FTP server requires it for security reasons or you wish to connect securely whenever remote FTP server supports it. Default is false since it might trigger certificate verification errors on misconfigured servers.

http.maxRequests
How many HTTP requests to launch in parallel. Can be overridden by the GIT_HTTP_MAX_REQUESTS environment variable. Default is 5.

http.minSessions
The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.

http.postBuffer
Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.

Note that raising this limit is only effective for disabling chunked transfer encoding and therefore should be used only where the remote server or a proxy only supports HTTP/1.0 or is noncompliant with the HTTP standard. Raising this is not, in general, an effective solution for most push problems, but can increase memory consumption significantly since the entire buffer is allocated even for small pushes.

http.lowSpeedLimit, http.lowSpeedTime
If the HTTP transfer speed is less than http.lowSpeedLimit for longer than http.lowSpeedTime seconds, the transfer is aborted. Can be overridden by the GIT_HTTP_LOW_SPEED_LIMIT and GIT_HTTP_LOW_SPEED_TIME environment variables.

http.noEPSV
A boolean which disables using of EPSV ftp command by curl. This can helpful with some "poor" ftp servers which don’t support EPSV mode. Can be overridden by the GIT_CURL_FTP_NO_EPSV environment variable. Default is false (curl will use EPSV).

http.userAgent
The HTTP USER_AGENT string presented to an HTTP server. The default value represents the version of the client Git such as git/1.7.1. This option allows you to override this value to a more common value such as Mozilla/4.0. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1.7.1). Can be overridden by the GIT_HTTP_USER_AGENT environment variable.

http.followRedirects
Whether git should follow HTTP redirects. If set to true, git will transparently follow any redirect issued by a server it encounters. If set to false, git will treat all redirects as errors. If set to initial, git will follow redirects only for the initial request to a remote, but not for subsequent follow-up HTTP requests. Since git uses the redirected URL as the base for the follow-up requests, this is generally sufficient. The default is initial.

http.<url>.*
Any of the http.* options above can be applied selectively to some URLs. For a config key to match a URL, each element of the config key is compared to that of the URL, in the following order:

Scheme (e.g., https in https://example.com/). This field must match exactly between the config key and the URL.

Host/domain name (e.g., example.com in https://example.com/). This field must match between the config key and the URL. It is possible to specify a * as part of the host name to match all subdomains at this level. https://*.example.com/ for example would match https://foo.example.com/, but not https://foo.bar.example.com/.

Port number (e.g., 8080 in http://example.com:8080/). This field must match exactly between the config key and the URL. Omitted port numbers are automatically converted to the correct default for the scheme before matching.

Path (e.g., repo.git in https://example.com/repo.git). The path field of the config key must match the path field of the URL either exactly or as a prefix of slash-delimited path elements. This means a config key with path foo/ matches URL path foo/bar. A prefix can only match on a slash (/) boundary. Longer matches take precedence (so a config key with path foo/bar is a better match to URL path foo/bar than a config key with just path foo/).

User name (e.g., user in https://user@example.com/repo.git). If the config key has a user name it must match the user name in the URL exactly. If the config key does not have a user name, that config key will match a URL with any user name (including none), but at a lower precedence than a config key with a user name.

The list above is ordered by decreasing precedence; a URL that matches a config key’s path is preferred to one that matches its user name. For example, if the URL is https://user@example.com/foo/bar a config key match of https://example.com/foo will be preferred over a config key match of https://user@example.com.

All URLs are normalized before attempting any matching (the password part, if embedded in the URL, is always ignored for matching purposes) so that equivalent URLs that are simply spelled differently will match properly. Environment variable settings always override any matches. The URLs that are matched against are those given directly to Git commands. This means any URLs visited as a result of a redirection do not participate in matching.

i18n.commitEncoding
Character encoding the commit messages are stored in; Git itself does not care per se, but this information is necessary e.g. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains). See e.g. git-mailinfo[1]. Defaults to utf-8.

i18n.logOutputEncoding
Character encoding the commit messages are converted to when running git log and friends.

imap.folder
The folder to drop the mails into, which is typically the Drafts folder. For example: "INBOX.Drafts", "INBOX/Drafts" or "[Gmail]/Drafts". Required.

imap.tunnel
Command used to setup a tunnel to the IMAP server through which commands will be piped instead of using a direct network connection to the server. Required when imap.host is not set.

imap.host
A URL identifying the server. Use an imap:// prefix for non-secure connections and an imaps:// prefix for secure connections. Ignored when imap.tunnel is set, but required otherwise.

imap.user
The username to use when logging in to the server.

imap.pass
The password to use when logging in to the server.

imap.port
An integer port number to connect to on the server. Defaults to 143 for imap:// hosts and 993 for imaps:// hosts. Ignored when imap.tunnel is set.

imap.sslverify
A boolean to enable/disable verification of the server certificate used by the SSL/TLS connection. Default is true. Ignored when imap.tunnel is set.

imap.preformattedHTML
A boolean to enable/disable the use of html encoding when sending a patch. An html encoded patch will be bracketed with <pre> and have a content type of text/html. Ironically, enabling this option causes Thunderbird to send the patch as a plain/text, format=fixed email. Default is false.

imap.authMethod
Specify authenticate method for authentication with IMAP server. If Git was built with the NO_CURL option, or if your curl version is older than 7.34.0, or if you’re running git-imap-send with the --no-curl option, the only supported method is CRAM-MD5. If this is not set then git imap-send uses the basic IMAP plaintext LOGIN command.

index.recordEndOfIndexEntries
Specifies whether the index file should include an "End Of Index Entry" section. This reduces index load time on multiprocessor machines but produces a message "ignoring EOIE extension" when reading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise.

index.recordOffsetTable
Specifies whether the index file should include an "Index Entry Offset Table" section. This reduces index load time on multiprocessor machines but produces a message "ignoring IEOT extension" when reading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise.

index.sparse
When enabled, write the index using sparse-directory entries. This has no effect unless core.sparseCheckout and core.sparseCheckoutCone are both enabled. Defaults to false.

index.threads
Specifies the number of threads to spawn when loading the index. This is meant to reduce index load time on multiprocessor machines. Specifying 0 or true will cause Git to auto-detect the number of CPU’s and set the number of threads accordingly. Specifying 1 or false will disable multithreading. Defaults to true.

index.version
Specify the version with which new index files should be initialized. This does not affect existing repositories. If feature.manyFiles is enabled, then the default is 4.

init.templateDir
Specify the directory from which templates will be copied. (See the "TEMPLATE DIRECTORY" section of git-init[1].)

init.defaultBranch
Allows overriding the default branch name e.g. when initializing a new repository.

instaweb.browser
Specify the program that will be used to browse your working repository in gitweb. See git-instaweb[1].

instaweb.httpd
The HTTP daemon command-line to start gitweb on your working repository. See git-instaweb[1].

instaweb.local
If true the web server started by git-instaweb[1] will be bound to the local IP (127.0.0.1).

instaweb.modulePath
The default module path for git-instaweb[1] to use instead of /usr/lib/apache2/modules. Only used if httpd is Apache.

instaweb.port
The port number to bind the gitweb httpd to. See git-instaweb[1].

interactive.singleKey
In interactive commands, allow the user to provide one-letter input with a single key (i.e., without hitting enter). Currently this is used by the --patch mode of git-add[1], git-checkout[1], git-restore[1], git-commit[1], git-reset[1], and git-stash[1]. Note that this setting is silently ignored if portable keystroke input is not available; requires the Perl module Term::ReadKey.

interactive.diffFilter
When an interactive command (such as git add --patch) shows a colorized diff, git will pipe the diff through the shell command defined by this configuration variable. The command may mark up the diff further for human consumption, provided that it retains a one-to-one correspondence with the lines in the original diff. Defaults to disabled (no filtering).

log.abbrevCommit
If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume --abbrev-commit. You may override this option with --no-abbrev-commit.

log.date
Set the default date-time mode for the log command. Setting a value for log.date is similar to using git log's --date option. See git-log[1] for details.

log.decorate
Print out the ref names of any commits that are shown by the log command. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. This is the same as the --decorate option of the git log.

log.excludeDecoration
Exclude the specified patterns from the log decorations. This is similar to the --decorate-refs-exclude command-line option, but the config option can be overridden by the --decorate-refs option.

log.diffMerges
Set default diff format to be used for merge commits. See --diff-merges in git-log[1] for details. Defaults to separate.

log.follow
If true, git log will act as if the --follow option was used when a single <path> is given. This has the same limitations as --follow, i.e. it cannot be used to follow multiple files and does not work well on non-linear history.

log.graphColors
A list of colors, separated by commas, that can be used to draw history lines in git log --graph.

log.showRoot
If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like git-log[1] or git-whatchanged[1], which normally hide the root commit will now show it. True by default.

log.showSignature
If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume --show-signature.

log.mailmap
If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume --use-mailmap, otherwise assume --no-use-mailmap. True by default.

lsrefs.unborn
May be "advertise" (the default), "allow", or "ignore". If "advertise", the server will respond to the client sending "unborn" (as described in protocol-v2.txt) and will advertise support for this feature during the protocol v2 capability advertisement. "allow" is the same as "advertise" except that the server will not advertise support for this feature; this is useful for load-balanced servers that cannot be updated atomically (for example), since the administrator could configure "allow", then after a delay, configure "advertise".

mailinfo.scissors
If true, makes git-mailinfo[1] (and therefore git-am[1]) act by default as if the --scissors option was provided on the command-line. When active, this features removes everything from the message body before a scissors line (i.e. consisting mainly of ">8", "8<" and "-").

mailmap.file
The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See git-shortlog[1] and git-blame[1].

mailmap.blob
Like mailmap.file, but consider the value as a reference to a blob in the repository. If both mailmap.file and mailmap.blob are given, both are parsed, with entries from mailmap.file taking precedence. In a bare repository, this defaults to HEAD:.mailmap. In a non-bare repository, it defaults to empty.

maintenance.auto
This boolean config option controls whether some commands run git maintenance run --auto after doing their normal work. Defaults to true.

maintenance.strategy
This string config option provides a way to specify one of a few recommended schedules for background maintenance. This only affects which tasks are run during git maintenance run --schedule=X commands, provided no --task=<task> arguments are provided. Further, if a maintenance.<task>.schedule config value is set, then that value is used instead of the one provided by maintenance.strategy. The possible strategy strings are:

none: This default setting implies no task are run at any schedule.

incremental: This setting optimizes for performing small maintenance activities that do not delete any data. This does not schedule the gc task, but runs the prefetch and commit-graph tasks hourly, the loose-objects and incremental-repack tasks daily, and the pack-refs task weekly.

maintenance.<task>.enabled
This boolean config option controls whether the maintenance task with name <task> is run when no --task option is specified to git maintenance run. These config values are ignored if a --task option exists. By default, only maintenance.gc.enabled is true.

maintenance.<task>.schedule
This config option controls whether or not the given <task> runs during a git maintenance run --schedule=<frequency> command. The value must be one of "hourly", "daily", or "weekly".

maintenance.commit-graph.auto
This integer config option controls how often the commit-graph task should be run as part of git maintenance run --auto. If zero, then the commit-graph task will not run with the --auto option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of reachable commits that are not in the commit-graph file is at least the value of maintenance.commit-graph.auto. The default value is 100.

maintenance.loose-objects.auto
This integer config option controls how often the loose-objects task should be run as part of git maintenance run --auto. If zero, then the loose-objects task will not run with the --auto option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of loose objects is at least the value of maintenance.loose-objects.auto. The default value is 100.

maintenance.incremental-repack.auto
This integer config option controls how often the incremental-repack task should be run as part of git maintenance run --auto. If zero, then the incremental-repack task will not run with the --auto option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of pack-files not in the multi-pack-index is at least the value of maintenance.incremental-repack.auto. The default value is 10.

man.viewer
Specify the programs that may be used to display help in the man format. See git-help[1].

man.<tool>.cmd
Specify the command to invoke the specified man viewer. The specified command is evaluated in shell with the man page passed as argument. (See git-help[1].)

man.<tool>.path
Override the path for the given tool that may be used to display help in the man format. See git-help[1].

merge.conflictStyle
Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is "merge", which shows a <<<<<<< conflict marker, changes made by one side, a ======= marker, changes made by the other side, and then a >>>>>>> marker. An alternate style, "diff3", adds a ||||||| marker and the original text before the ======= marker. The "merge" style tends to produce smaller conflict regions than diff3, both because of the exclusion of the original text, and because when a subset of lines match on the two sides they are just pulled out of the conflict region. Another alternate style, "zdiff3", is similar to diff3 but removes matching lines on the two sides from the conflict region when those matching lines appear near either the beginning or end of a conflict region.

merge.defaultToUpstream
If merge is called without any commit argument, merge the upstream branches configured for the current branch by using their last observed values stored in their remote-tracking branches. The values of the branch.<current branch>.merge that name the branches at the remote named by branch.<current branch>.remote are consulted, and then they are mapped via remote.<remote>.fetch to their corresponding remote-tracking branches, and the tips of these tracking branches are merged. Defaults to true.

merge.ff
By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to false, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the --no-ff option from the command line). When set to only, only such fast-forward merges are allowed (equivalent to giving the --ff-only option from the command line).

merge.verifySignatures
If true, this is equivalent to the --verify-signatures command line option. See git-merge[1] for details.

merge.branchdesc
In addition to branch names, populate the log message with the branch description text associated with them. Defaults to false.

merge.log
In addition to branch names, populate the log message with at most the specified number of one-line descriptions from the actual commits that are being merged. Defaults to false, and true is a synonym for 20.

merge.suppressDest
By adding a glob that matches the names of integration branches to this multi-valued configuration variable, the default merge message computed for merges into these integration branches will omit "into <branch name>" from its title.

An element with an empty value can be used to clear the list of globs accumulated from previous configuration entries. When there is no merge.suppressDest variable defined, the default value of master is used for backward compatibility.

merge.renameLimit
The number of files to consider in the exhaustive portion of rename detection during a merge. If not specified, defaults to the value of diff.renameLimit. If neither merge.renameLimit nor diff.renameLimit are specified, currently defaults to 7000. This setting has no effect if rename detection is turned off.

merge.renames
Whether Git detects renames. If set to "false", rename detection is disabled. If set to "true", basic rename detection is enabled. Defaults to the value of diff.renames.

merge.directoryRenames
Whether Git detects directory renames, affecting what happens at merge time to new files added to a directory on one side of history when that directory was renamed on the other side of history. If merge.directoryRenames is set to "false", directory rename detection is disabled, meaning that such new files will be left behind in the old directory. If set to "true", directory rename detection is enabled, meaning that such new files will be moved into the new directory. If set to "conflict", a conflict will be reported for such paths. If merge.renames is false, merge.directoryRenames is ignored and treated as false. Defaults to "conflict".

merge.renormalize
Tell Git that canonical representation of files in the repository has changed over time (e.g. earlier commits record text files with CRLF line endings, but recent ones use LF line endings). In such a repository, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts. For more information, see section "Merging branches with differing checkin/checkout attributes" in gitattributes[5].

merge.stat
Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default.

merge.autoStash
When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run merge on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts. This option can be overridden by the --no-autostash and --autostash options of git-merge[1]. Defaults to false.

merge.tool
Controls which merge tool is used by git-mergetool[1]. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.<tool>.cmd variable is defined.

merge.guitool
Controls which merge tool is used by git-mergetool[1] when the -g/--gui flag is specified. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.<guitool>.cmd variable is defined.

araxis

bc

codecompare

deltawalker

diffmerge

diffuse

ecmerge

emerge

examdiff

guiffy

gvimdiff

kdiff3

meld

nvimdiff

opendiff

p4merge

smerge

tkdiff

tortoisemerge

vimdiff

winmerge

xxdiff

merge.verbosity
Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the GIT_MERGE_VERBOSITY environment variable.

merge.<driver>.name
Defines a human-readable name for a custom low-level merge driver. See gitattributes[5] for details.

merge.<driver>.driver
Defines the command that implements a custom low-level merge driver. See gitattributes[5] for details.

merge.<driver>.recursive
Names a low-level merge driver to be used when performing an internal merge between common ancestors. See gitattributes[5] for details.

mergetool.<tool>.path
Override the path for the given tool. This is useful in case your tool is not in the PATH.

mergetool.<tool>.cmd
Specify the command to invoke the specified merge tool. The specified command is evaluated in shell with the following variables available: BASE is the name of a temporary file containing the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of the file on the current branch; REMOTE is the name of a temporary file containing the contents of the file from the branch being merged; MERGED contains the name of the file to which the merge tool should write the results of a successful merge.

mergetool.<tool>.hideResolved
Allows the user to override the global mergetool.hideResolved value for a specific tool. See mergetool.hideResolved for the full description.

mergetool.<tool>.trustExitCode
For a custom merge command, specify whether the exit code of the merge command can be used to determine whether the merge was successful. If this is not set to true then the merge target file timestamp is checked and the merge assumed to have been successful if the file has been updated, otherwise the user is prompted to indicate the success of the merge.

mergetool.meld.hasOutput
Older versions of meld do not support the --output option. Git will attempt to detect whether meld supports --output by inspecting the output of meld --help. Configuring mergetool.meld.hasOutput will make Git skip these checks and use the configured value instead. Setting mergetool.meld.hasOutput to true tells Git to unconditionally use the --output option, and false avoids using --output.

mergetool.meld.useAutoMerge
When the --auto-merge is given, meld will merge all non-conflicting parts automatically, highlight the conflicting parts and wait for user decision. Setting mergetool.meld.useAutoMerge to true tells Git to unconditionally use the --auto-merge option with meld. Setting this value to auto makes git detect whether --auto-merge is supported and will only use --auto-merge when available. A value of false avoids using --auto-merge altogether, and is the default value.

mergetool.hideResolved
During a merge Git will automatically resolve as many conflicts as possible and write the MERGED file containing conflict markers around any conflicts that it cannot resolve; LOCAL and REMOTE normally represent the versions of the file from before Git’s conflict resolution. This flag causes LOCAL and REMOTE to be overwriten so that only the unresolved conflicts are presented to the merge tool. Can be configured per-tool via the mergetool.<tool>.hideResolved configuration variable. Defaults to false.

mergetool.keepBackup
After performing a merge, the original file with conflict markers can be saved as a file with a .orig extension. If this variable is set to false then this file is not preserved. Defaults to true (i.e. keep the backup files).

mergetool.keepTemporaries
When invoking a custom merge tool, Git uses a set of temporary files to pass to the tool. If the tool returns an error and this variable is set to true, then these temporary files will be preserved, otherwise they will be removed after the tool has exited. Defaults to false.

mergetool.writeToTemp
Git writes temporary BASE, LOCAL, and REMOTE versions of conflicting files in the worktree by default. Git will attempt to use a temporary directory for these files when set true. Defaults to false.

mergetool.prompt
Prompt before each invocation of the merge resolution program.

notes.mergeStrategy
Which merge strategy to choose by default when resolving notes conflicts. Must be one of manual, ours, theirs, union, or cat_sort_uniq. Defaults to manual. See "NOTES MERGE STRATEGIES" section of git-notes[1] for more information on each strategy.

notes.<name>.mergeStrategy
Which merge strategy to choose when doing a notes merge into refs/notes/<name>. This overrides the more general "notes.mergeStrategy". See the "NOTES MERGE STRATEGIES" section in git-notes[1] for more information on the available strategies.

notes.displayRef
The (fully qualified) refname from which to show notes when showing commit messages. The value of this variable can be set to a glob, in which case notes from all matching refs will be shown. You may also specify this configuration variable several times. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.

This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or globs.

The effective value of "core.notesRef" (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.

notes.rewrite.<command>
When rewriting commits with <command> (currently amend or rebase) and this variable is set to true, Git automatically copies your notes from the original to the rewritten commit. Defaults to true, but see "notes.rewriteRef" below.

notes.rewriteMode
When copying notes during a rewrite (see the "notes.rewrite.<command>" option), determines what to do if the target commit already has a note. Must be one of overwrite, concatenate, cat_sort_uniq, or ignore. Defaults to concatenate.

This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable.

notes.rewriteRef
When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. The ref may be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times.

Does not have a default value; you must configure this variable to enable note rewriting. Set it to refs/notes/commits to enable rewriting for the default commit notes.

This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or globs.

pack.window
The size of the window used by git-pack-objects[1] when no window size is given on the command line. Defaults to 10.

pack.depth
The maximum delta depth used by git-pack-objects[1] when no maximum depth is given on the command line. Defaults to 50. Maximum value is 4095.

pack.windowMemory
The maximum size of memory that is consumed by each thread in git-pack-objects[1] for pack window memory when no limit is given on the command line. The value can be suffixed with "k", "m", or "g". When left unconfigured (or set explicitly to 0), there will be no limit.

pack.compression
An integer -1..9, indicating the compression level for objects in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to -1, the zlib default, which is "a default compromise between speed and compression (currently equivalent to level 6)."

Note that changing the compression level will not automatically recompress all existing objects. You can force recompression by passing the -F option to git-repack[1].

pack.allowPackReuse
When true, and when reachability bitmaps are enabled, pack-objects will try to send parts of the bitmapped packfile verbatim. This can reduce memory and CPU usage to serve fetches, but might result in sending a slightly larger pack. Defaults to true.

pack.island
An extended regular expression configuring a set of delta islands. See "DELTA ISLANDS" in git-pack-objects[1] for details.

pack.islandCore
Specify an island name which gets to have its objects be packed first. This creates a kind of pseudo-pack at the front of one pack, so that the objects from the specified island are hopefully faster to copy into any pack that should be served to a user requesting these objects. In practice this means that the island specified should likely correspond to what is the most commonly cloned in the repo. See also "DELTA ISLANDS" in git-pack-objects[1].

pack.deltaCacheSize
The maximum memory in bytes used for caching deltas in git-pack-objects[1] before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB.

pack.deltaCacheLimit
The maximum size of a delta, that is cached in git-pack-objects[1]. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. Maximum value is 65535.

pack.threads
Specifies the number of threads to spawn when searching for best delta matches. This requires that git-pack-objects[1] be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and set the number of threads accordingly.

pack.indexVersion
Specify the default pack index version. Valid values are 1 for legacy pack index used by Git versions prior to 1.5.2, and 2 for the new pack index with capabilities for packs larger than 4 GB as well as proper protection against the repacking of corrupted packs. Version 2 is the default. Note that version 2 is enforced and this config option ignored whenever the corresponding pack is larger than 2 GB.

If you have an old Git that does not understand the version 2 *.idx file, cloning or fetching over a non native protocol (e.g. "http") that will copy both *.pack file and corresponding *.idx file from the other side may give you a repository that cannot be accessed with your older version of Git. If the *.pack file is smaller than 2 GB, however, you can use git-index-pack[1] on the *.pack file to regenerate the *.idx file.

pack.packSizeLimit
The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the --max-pack-size option of git-repack[1]. Reaching this limit results in the creation of multiple packfiles.

Note that this option is rarely useful, and may result in a larger total on-disk size (because Git will not store deltas between packs), as well as worse runtime performance (object lookup within multiple packs is slower than a single pack, and optimizations like reachability bitmaps cannot cope with multiple packs).

If you need to actively run Git using smaller packfiles (e.g., because your filesystem does not support large files), this option may help. But if your goal is to transmit a packfile over a medium that supports limited sizes (e.g., removable media that cannot store the whole repository), you are likely better off creating a single large packfile and splitting it using a generic multi-volume archive tool (e.g., Unix split).

The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of k, m, or g are supported.

pack.useBitmaps
When true, git will use pack bitmaps (if available) when packing to stdout (e.g., during the server side of a fetch). Defaults to true. You should not generally need to turn this off unless you are debugging pack bitmaps.

pack.useSparse
When true, git will default to using the --sparse option in git pack-objects when the --revs option is present. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. Default is true.

pack.preferBitmapTips
When selecting which commits will receive bitmaps, prefer a commit at the tip of any reference that is a suffix of any value of this configuration over any other commits in the "selection window".

Note that setting this configuration to refs/foo does not mean that the commits at the tips of refs/foo/bar and refs/foo/baz will necessarily be selected. This is because commits are selected for bitmaps from within a series of windows of variable length.

If a commit at the tip of any reference which is a suffix of any value of this configuration is seen in a window, it is immediately given preference over any other commit in that window.

pack.writeBitmaps (deprecated)
This is a deprecated synonym for repack.writeBitmaps.

pack.writeBitmapHashCache
When true, git will include a "hash cache" section in the bitmap index (if one is written). This cache can be used to feed git’s delta heuristics, potentially leading to better deltas between bitmapped and non-bitmapped objects (e.g., when serving a fetch between an older, bitmapped pack and objects that have been pushed since the last gc). The downside is that it consumes 4 bytes per object of disk space. Defaults to true.

When writing a multi-pack reachability bitmap, no new namehashes are computed; instead, any namehashes stored in an existing bitmap are permuted into their appropriate location when writing a new bitmap.

pack.writeReverseIndex
When true, git will write a corresponding .rev file (see: Documentation/technical/pack-format.txt) for each new packfile that it writes in all places except for git-fast-import[1] and in the bulk checkin mechanism. Defaults to false.

pager.<cmd>
If the value is boolean, turns on or off pagination of the output of a particular Git subcommand when writing to a tty. Otherwise, turns on pagination for the subcommand using the pager specified by the value of pager.<cmd>. If --paginate or --no-pager is specified on the command line, it takes precedence over this option. To disable pagination for all commands, set core.pager or GIT_PAGER to cat.

pretty.<name>
Alias for a --pretty= format string, as specified in git-log[1]. Any aliases defined here can be used just as the built-in pretty formats could. For example, running git config pretty.changelog "format:* %H %s" would cause the invocation git log --pretty=changelog to be equivalent to running git log "--pretty=format:* %H %s". Note that an alias with the same name as a built-in format will be silently ignored.

protocol.allow
If set, provide a user defined default policy for all protocols which don’t explicitly have a policy (protocol.<name>.allow). By default, if unset, known-safe protocols (http, https, git, ssh, file) have a default policy of always, known-dangerous protocols (ext) have a default policy of never, and all other protocols have a default policy of user. Supported policies:

always - protocol is always able to be used.

never - protocol is never able to be used.

user - protocol is only able to be used when GIT_PROTOCOL_FROM_USER is either unset or has a value of 1. This policy should be used when you want a protocol to be directly usable by the user but don’t want it used by commands which execute clone/fetch/push commands without user input, e.g. recursive submodule initialization.

protocol.<name>.allow
Set a policy to be used by protocol <name> with clone/fetch/push commands. See protocol.allow above for the available policies.

The protocol names currently used by git are:

file: any local file-based path (including file:// URLs, or local paths)

git: the anonymous git protocol over a direct TCP connection (or proxy, if configured)

ssh: git over ssh (including host:path syntax, ssh://, etc).

http: git over http, both "smart http" and "dumb http". Note that this does not include https; if you want to configure both, you must do so individually.

any external helpers are named by their protocol (e.g., use hg to allow the git-remote-hg helper)

protocol.version
If set, clients will attempt to communicate with a server using the specified protocol version. If the server does not support it, communication falls back to version 0. If unset, the default is 2. Supported versions:

0 - the original wire protocol.

1 - the original wire protocol with the addition of a version string in the initial response from the server.

2 - wire protocol version 2.

pull.ff
By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to false, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the --no-ff option from the command line). When set to only, only such fast-forward merges are allowed (equivalent to giving the --ff-only option from the command line). This setting overrides merge.ff when pulling.

pull.rebase
When true, rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when "git pull" is run. See "branch.<name>.rebase" for setting this on a per-branch basis.

When merges (or just m), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details).

When the value is interactive (or just i), the rebase is run in interactive mode.

NOTE: this is a possibly dangerous operation; do not use it unless you understand the implications (see git-rebase[1] for details).

pull.octopus
The default merge strategy to use when pulling multiple branches at once.

pull.twohead
The default merge strategy to use when pulling a single branch.

push.default
Defines the action git push should take if no refspec is given (whether from the command-line, config, or elsewhere). Different values are well-suited for specific workflows; for instance, in a purely central workflow (i.e. the fetch source is equal to the push destination), upstream is probably what you want. Possible values are:

nothing - do not push anything (error out) unless a refspec is given. This is primarily meant for people who want to avoid mistakes by always being explicit.

current - push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.

upstream - push the current branch back to the branch whose changes are usually integrated into the current branch (which is called @{upstream}). This mode only makes sense if you are pushing to the same repository you would normally pull from (i.e. central workflow).

tracking - This is a deprecated synonym for upstream.

simple - pushes the current branch with the same name on the remote.

If you are working on a centralized workflow (pushing to the same repository you pull from, which is typically origin), then you need to configure an upstream branch with the same name.

This mode is the default since Git 2.0, and is the safest option suited for beginners.

matching - push all branches having the same name on both ends. This makes the repository you are pushing to remember the set of branches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push to will have these two branches, and your local maint and master will be pushed there).

To use this mode effectively, you have to make sure all the branches you would push out are ready to be pushed out before running git push, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.

This used to be the default, but not since Git 2.0 (simple is the new default).

push.followTags
If set to true enable --follow-tags option by default. You may override this configuration at time of push by specifying --no-follow-tags.

push.gpgSign
May be set to a boolean value, or the string if-asked. A true value causes all pushes to be GPG signed, as if --signed is passed to git-push[1]. The string if-asked causes pushes to be signed if the server supports it, as if --signed=if-asked is passed to git push. A false value may override a value from a lower-priority config file. An explicit command-line flag always overrides this config option.

push.pushOption
When no --push-option=<option> argument is given from the command line, git push behaves as if each <value> of this variable is given as --push-option=<value>.

This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. .git/config in a repository) to clear the values inherited from a lower priority configuration files (e.g. $HOME/.gitconfig).

Example:

/etc/gitconfig
  push.pushoption = a
  push.pushoption = b

~/.gitconfig
  push.pushoption = c

repo/.git/config
  push.pushoption =
  push.pushoption = b

This will result in only b (a and c are cleared).
push.recurseSubmodules
Make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If the value is check then Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing, the push will be aborted and exit with non-zero status. If the value is on-demand then all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. If the value is no then default behavior of ignoring submodules when pushing is retained. You may override this configuration at time of push by specifying --recurse-submodules=check|on-demand|no. If not set, no is used by default, unless submodule.recurse is set (in which case a true value means on-demand).

push.useForceIfIncludes
If set to "true", it is equivalent to specifying --force-if-includes as an option to git-push[1] in the command line. Adding --no-force-if-includes at the time of push overrides this configuration setting.

push.negotiate
If set to "true", attempt to reduce the size of the packfile sent by rounds of negotiation in which the client and the server attempt to find commits in common. If "false", Git will rely solely on the server’s ref advertisement to find commits in common.

rebase.backend
Default backend to use for rebasing. Possible choices are apply or merge. In the future, if the merge backend gains all remaining capabilities of the apply backend, this setting may become unused.

rebase.stat
Whether to show a diffstat of what changed upstream since the last rebase. False by default.

rebase.autoSquash
If set to true enable --autosquash option by default.

rebase.autoStash
When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts. This option can be overridden by the --no-autostash and --autostash options of git-rebase[1]. Defaults to false.

rebase.missingCommitsCheck
If set to "warn", git rebase -i will print a warning if some commits are removed (e.g. a line was deleted), however the rebase will still proceed. If set to "error", it will print the previous warning and stop the rebase, git rebase --edit-todo can then be used to correct the error. If set to "ignore", no checking is done. To drop a commit without warning or error, use the drop command in the todo list. Defaults to "ignore".

rebase.instructionFormat
A format string, as specified in git-log[1], to be used for the todo list during an interactive rebase. The format will automatically have the long commit hash prepended to the format.

rebase.abbreviateCommands
If set to true, git rebase will use abbreviated command names in the todo list resulting in something like this:

	p deadbee The oneline of the commit
	p fa1afe1 The oneline of the next commit
	...
instead of:

	pick deadbee The oneline of the commit
	pick fa1afe1 The oneline of the next commit
	...
Defaults to false.

rebase.rescheduleFailedExec
Automatically reschedule exec commands that failed. This only makes sense in interactive mode (or when an --exec option was provided). This is the same as specifying the --reschedule-failed-exec option.

rebase.forkPoint
If set to false set --no-fork-point option by default.

receive.advertiseAtomic
By default, git-receive-pack will advertise the atomic push capability to its clients. If you don’t want to advertise this capability, set this variable to false.

receive.advertisePushOptions
When set to true, git-receive-pack will advertise the push options capability to its clients. False by default.

receive.autogc
By default, git-receive-pack will run "git-gc --auto" after receiving data from git-push and updating refs. You can stop it by setting this variable to false.

receive.certNonceSeed
By setting this variable to a string, git receive-pack will accept a git push --signed and verifies it by using a "nonce" protected by HMAC using this string as a secret key.

receive.certNonceSlop
When a git push --signed sent a push certificate with a "nonce" that was issued by a receive-pack serving the same repository within this many seconds, export the "nonce" found in the certificate to GIT_PUSH_CERT_NONCE to the hooks (instead of what the receive-pack asked the sending side to include). This may allow writing checks in pre-receive and post-receive a bit easier. Instead of checking GIT_PUSH_CERT_NONCE_SLOP environment variable that records by how many seconds the nonce is stale to decide if they want to accept the certificate, they only can check GIT_PUSH_CERT_NONCE_STATUS is OK.

receive.fsckObjects
If it is set to true, git-receive-pack will check all received objects. See transfer.fsckObjects for what’s checked. Defaults to false. If not set, the value of transfer.fsckObjects is used instead.

receive.fsck.<msg-id>
Acts like fsck.<msg-id>, but is used by git-receive-pack[1] instead of git-fsck[1]. See the fsck.<msg-id> documentation for details.

receive.fsck.skipList
Acts like fsck.skipList, but is used by git-receive-pack[1] instead of git-fsck[1]. See the fsck.skipList documentation for details.

receive.keepAlive
After receiving the pack from the client, receive-pack may produce no output (if --quiet was specified) while processing the pack, causing some networks to drop the TCP connection. With this option set, if receive-pack does not transmit any data in this phase for receive.keepAlive seconds, it will send a short keepalive packet. The default is 5 seconds; set to 0 to disable keepalives entirely.

receive.unpackLimit
If the number of objects received in a push is below this limit then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of transfer.unpackLimit is used instead.

receive.maxInputSize
If the size of the incoming pack stream is larger than this limit, then git-receive-pack will error out, instead of accepting the pack file. If not set or set to 0, then the size is unlimited.

receive.denyDeletes
If set to true, git-receive-pack will deny a ref update that deletes the ref. Use this to prevent such a ref deletion via a push.

receive.denyDeleteCurrent
If set to true, git-receive-pack will deny a ref update that deletes the currently checked out branch of a non-bare repository.

receive.denyCurrentBranch
If set to true or "refuse", git-receive-pack will deny a ref update to the currently checked out branch of a non-bare repository. Such a push is potentially dangerous because it brings the HEAD out of sync with the index and working tree. If set to "warn", print a warning of such a push to stderr, but allow the push to proceed. If set to false or "ignore", allow such pushes with no message. Defaults to "refuse".

Another option is "updateInstead" which will update the working tree if pushing into the current branch. This option is intended for synchronizing working directories when one side is not easily accessible via interactive ssh (e.g. a live web site, hence the requirement that the working directory be clean). This mode also comes in handy when developing inside a VM to test and fix code on different Operating Systems.

By default, "updateInstead" will refuse the push if the working tree or the index have any difference from the HEAD, but the push-to-checkout hook can be used to customize this. See githooks[5].

receive.denyNonFastForwards
If set to true, git-receive-pack will deny a ref update which is not a fast-forward. Use this to prevent such an update via a push, even if that push is forced. This configuration variable is set when initializing a shared repository.

receive.hideRefs
This variable is the same as transfer.hideRefs, but applies only to receive-pack (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by git push is rejected.

receive.procReceiveRefs
This is a multi-valued variable that defines reference prefixes to match the commands in receive-pack. Commands matching the prefixes will be executed by an external hook "proc-receive", instead of the internal execute_commands function. If this variable is not defined, the "proc-receive" hook will never be used, and all commands will be executed by the internal execute_commands function.

For example, if this variable is set to "refs/for", pushing to reference such as "refs/for/master" will not create or update a reference named "refs/for/master", but may create or update a pull request directly by running the hook "proc-receive".

Modificadores opcionais podem ser fornecidos no início do valor para filtrar comandos para ações específicas: criar (a), modificar (m), excluir (d). A !pode ser incluído nos modificadores para negar a entrada do prefixo de referência. Por exemplo:

git config --system --add receive.procReceiveRefs ad:refs/heads 
git config --system --add receive.procReceiveRefs !:refs/heads
receber.updateServerInfo
Se definido como true, git-receive-pack executará git-update-server-info após receber dados de git-push e atualizar refs.

receber.shallowUpdate
Se definido como true, .git/shallow pode ser atualizado quando novas referências requerem novas raízes superficiais. Caso contrário, essas referências são rejeitadas.

remote.pushDefault
O controle remoto para o qual enviar por padrão. Substitui branch.<name>.remotepara todas as ramificações e é substituído por branch.<name>.pushRemoteramificações específicas.

remoto.<nome>.url
A URL de um repositório remoto. Veja git-fetch[1] ou git-push[1] .

remote.<name>.pushurl
A URL de push de um repositório remoto. Veja git-push[1] .

remoto.<nome>.proxy
Para controles remotos que exigem curl (http, https e ftp), a URL para o proxy a ser usado para esse controle remoto. Defina como a string vazia para desabilitar o proxy para esse controle remoto.

remote.<name>.proxyAuthMethod
Para controles remotos que exigem curl (http, https e ftp), o método a ser usado para autenticação no proxy em uso (provavelmente definido em remote.<name>.proxy). Veja http.proxyAuthMethod.

remote.<name>.fetch
O conjunto padrão de "refspec" para git-fetch[1] . Veja git-fetch[1] .

remoto.<nome>.push
O conjunto padrão de "refspec" para git-push[1] . Veja git-push[1] .

remoto.<nome>.espelho
Se true, o push para esse controle remoto se comportará automaticamente como se a --mirroropção fosse fornecida na linha de comando.

remote.<name>.skipDefaultUpdate
Se true, esse controle remoto será ignorado por padrão ao atualizar usando git-fetch[1] ou o updatesubcomando de git-remote[1] .

remote.<name>.skipFetchAll
Se true, esse controle remoto será ignorado por padrão ao atualizar usando git-fetch[1] ou o updatesubcomando de git-remote[1] .

remote.<name>.receivepack
O programa padrão a ser executado no lado remoto ao pressionar. Veja a opção --receive-pack de git-push[1] .

remote.<name>.uploadpack
O programa padrão a ser executado no lado remoto durante a busca. Veja a opção --upload-pack de git-fetch-pack[1] .

remoto.<nome>.tagOpt
Definir esse valor como --no-tags desativa o seguimento automático de tags ao buscar do <name> remoto. Configurá-lo para --tags buscará cada tag do remoto <name>, mesmo se eles não estiverem acessíveis a partir de cabeças de ramificações remotas. Passar esses sinalizadores diretamente para git-fetch[1] pode substituir essa configuração. Veja as opções --tags e --no-tags de git-fetch[1] .

remoto.<nome>.vcs
Definir isso para um valor <vcs> fará com que o Git interaja com o controle remoto com o auxiliar git-remote-<vcs>.

remoto.<nome>.prune
Quando definido como true, a busca desse controle remoto por padrão também removerá todas as referências de rastreamento remoto que não existem mais no controle remoto (como se a --pruneopção fosse fornecida na linha de comando). Substitui as fetch.pruneconfigurações, se houver.

remote.<name>.pruneTags
Quando definido como true, a busca desse controle remoto por padrão também removerá quaisquer tags locais que não existam mais no controle remoto se a poda for ativada em geral via remote.<name>.prune, fetch.pruneou --prune. Substitui as fetch.pruneTagsconfigurações, se houver.

Veja também remote.<name>.prunee a seção PRUNING de git-fetch[1] .

remote.<name>.promisor
Quando definido como true, este controle remoto será usado para buscar objetos promissores.

remote.<name>.partialclonefilter
O filtro que será aplicado ao buscar deste remoto promissor.

remotos.<grupo>
A lista de controles remotos que são buscados por "git remote update <group>". Veja git-remote[1] .

repack.useDeltaBaseOffset
Por padrão, git-repack[1] cria pacotes que usam deslocamento de base delta. Se você precisar compartilhar seu repositório com o Git anterior à versão 1.4.4, diretamente ou por meio de um protocolo burro como http, você precisará definir essa opção como "false" e reempacotar. O acesso de versões antigas do Git sobre o protocolo nativo não é afetado por esta opção.

repack.packKeptObjects
Se definido como true, faz git repackagir como se tivesse --pack-kept-objectssido passado. Veja git-repack[1] para detalhes. O padrão é falsenormalmente, mas truese um índice de bitmap estiver sendo gravado (via --write-bitmap-indexou repack.writeBitmaps).

repack.useDeltaIslands
Se definido como true, faz git repackagir como se tivesse --delta-islands sido passado. Padrões para false.

repack.writeBitmaps
Quando true, o git escreverá um índice de bitmap ao empacotar todos os objetos no disco (por exemplo, quando git repack -afor executado). Esse índice pode acelerar a fase de "contagem de objetos" de pacotes subsequentes criados para clones e buscas, ao custo de algum espaço em disco e tempo extra gasto no reempacotamento inicial. Isso não tem efeito se vários arquivos de pacote forem criados. O padrão é true em repositórios simples, caso contrário, false.

rerere.autoUpdate
Quando definido como true, git-rerereatualiza o índice com o conteúdo resultante depois de resolver os conflitos de forma limpa usando a resolução gravada anteriormente. O padrão é falso.

rerere.ativado
Ative a gravação de conflitos resolvidos, para que blocos de conflito idênticos possam ser resolvidos automaticamente, caso sejam encontrados novamente. Por padrão, git-rerere[1] é habilitado se houver um rr-cachediretório sob o $GIT_DIR, por exemplo, se "rerere" foi usado anteriormente no repositório.

reset.quiet
Quando definido como true, o git reset terá como padrão a opção --quiet .

sendemail.identity
Uma identidade de configuração. Quando fornecido, faz com que os valores na subseção sendemail.<identity> tenham precedência sobre os valores na seção sendemail . A identidade padrão é o valor de sendemail.identity.

sendemail.smtpCriptografia
Veja git-send-email[1] para descrição. Observe que essa configuração não está sujeita ao mecanismo de identidade .

sendemail.smtpsslcertpath
Caminho para ca-certificates (um diretório ou um único arquivo). Defina-o como uma string vazia para desabilitar a verificação do certificado.

sendemail.<identidade>.*
Versões específicas de identidade dos parâmetros sendemail.* encontradas abaixo, tendo precedência sobre aquelas quando essa identidade é selecionada, por meio da linha de comando ou sendemail.identity.

sendemail.aliasesFile
sendemail.aliasFileType
enviaremail.anotar
sendemail.bcc
sendemail.cc
sendemail.ccCmd
sendemail.chainReplyTo
sendemail.confirm
sendemail.envelopeSender
sendemail.from
sendemail.multiEdit
sendemail.signedoffbycc
sendemail.smtpPass
sendemail.suppresscc
sendemail.suppressFrom
enviar um email a
sendemail.tocmd
sendemail.smtpDomain
sendemail.smtpServer
sendemail.smtpServerPort
sendemail.smtpServerOption
sendemail.smtpUser
sendemail.thread
sendemail.transferEncoding
enviaremail.validate
sendemail.xmailer
Veja git-send-email[1] para descrição.

sendemail.signedoffcc (obsoleto)
Alias ​​obsoletos para sendemail.signedoffbycc.

sendemail.smtpBatchSize
Número de mensagens a serem enviadas por conexão, após isso ocorrerá um relogin. Se o valor for 0 ou indefinido, envie todas as mensagens em uma conexão. Veja também a --batch-sizeopção de git-send-email[1] .

sendemail.smtpReloginDelay
Segundos de espera antes de se reconectar ao servidor smtp. Veja também a --relogin-delayopção de git-send-email[1] .

sendemail.forbidSendmailVariáveis
Para evitar erros comuns de configuração incorreta, git-send-email[1] será abortado com um aviso se existir alguma opção de configuração para "sendmail". Defina esta variável para ignorar a verificação.

editor.sequência
Editor de texto usado por git rebase -ipara editar o arquivo de instrução de rebase. O valor deve ser interpretado pelo shell quando for usado. Ele pode ser substituído pela GIT_SEQUENCE_EDITORvariável de ambiente. Quando não configurado, o editor de mensagem de confirmação padrão é usado.

showBranch.default
O conjunto padrão de branches para git-show-branch[1] . Veja git-show-branch[1] .

splitIndex.maxPercentChange
Quando o recurso de índice de divisão é usado, isso especifica a porcentagem de entradas que o índice de divisão pode conter em comparação com o número total de entradas no índice de divisão e no índice compartilhado antes que um novo índice compartilhado seja gravado. O valor deve estar entre 0 e 100. Se o valor for 0, um novo índice compartilhado sempre será gravado, se for 100, um novo índice compartilhado nunca será gravado. Por padrão, o valor é 20, portanto, um novo índice compartilhado é gravado se o número de entradas no índice de divisão for maior que 20% do número total de entradas. Veja git-update-index[1] .

splitIndex.sharedIndexExpire
Quando o recurso de índice dividido é usado, os arquivos de índice compartilhados que não foram modificados desde o momento que essa variável especifica serão removidos quando um novo arquivo de índice compartilhado for criado. O valor "agora" expira todas as entradas imediatamente e "nunca" suprime completamente a expiração. O valor padrão é "2.weeks.ago". Observe que um arquivo de índice compartilhado é considerado modificado (para fins de expiração) cada vez que um novo arquivo de índice dividido é criado com base nele ou lido a partir dele. Veja git-update-index[1] .

ssh.variant
Por padrão, o Git determina os argumentos da linha de comando a serem usados ​​com base no nome base do comando SSH configurado (configurado usando a variável de ambiente GIT_SSHou GIT_SSH_COMMANDou a configuração core.sshCommand). Se o nome base não for reconhecido, o Git tentará detectar o suporte das opções OpenSSH invocando primeiro o comando SSH configurado com a -Gopção (configuração de impressão) e, posteriormente, usará as opções OpenSSH (se for bem-sucedida) ou nenhuma opção além do comando host e remoto (se falhar).

A variável de configuração ssh.variantpode ser definida para substituir essa detecção. Os valores válidos são ssh(para usar as opções do OpenSSH), plink, putty, tortoiseplink, simple(sem opções exceto o comando host e remoto). A detecção automática padrão pode ser solicitada explicitamente usando o valor auto. Qualquer outro valor é tratado como ssh. Essa configuração também pode ser substituída por meio da variável de ambiente GIT_SSH_VARIANT.

Os parâmetros de linha de comando atuais usados ​​para cada variante são os seguintes:

ssh- [-p porta] [-4] [-6] [-o opção] [username@]comando do host

simple- comando [username@]host

plinkou putty- [-P porta] [-4] [-6] [username@]comando do host

tortoiseplink- [-P port] [-4] [-6] -batch [username@]comando do host

Exceto pela simplevariante, os parâmetros de linha de comando provavelmente mudarão à medida que o git ganhar novos recursos.

status.relativePaths
Por padrão, git-status[1] mostra os caminhos relativos ao diretório atual. Definir essa variável para falsemostrar os caminhos relativos à raiz do repositório (este era o padrão para o Git antes da v1.5.4).

status.curto
Defina como true para habilitar --short por padrão em git-status[1] . A opção --no-short tem precedência sobre esta variável.

status.filial
Defina como true para habilitar --branch por padrão em git-status[1] . A opção --no-branch tem precedência sobre esta variável.

status.aheadBehind
Defina como true para habilitar --ahead-behinde false para habilitar --no-ahead-behindpor padrão em git-status[1] para formatos de status não-porcelana. O padrão é verdadeiro.

status.displayCommentPrefix
Se definido como true, git-status[1] inserirá um prefixo de comentário antes de cada linha de saída (começando com core.commentChar, ou seja, #por padrão). Esse era o comportamento do git-status[1] no Git 1.8.4 e anteriores. O padrão é falso.

status.renameLimit
O número de arquivos a serem considerados ao realizar a detecção de renomeação em git-status[1] e git-commit[1] . O padrão é o valor de diff.renameLimit.

status.renomes
Se e como o Git detecta renomeações em git-status[1] e git-commit[1] . Se definido como "falso", a detecção de renomeação é desabilitada. Se definido como "true", a detecção básica de renomeação é habilitada. Se configurado para "copies" ou "copy", o Git também detectará cópias. O padrão é o valor de diff.renames.

status.showStash
Se definido como true, git-status[1] exibirá o número de entradas atualmente armazenadas. O padrão é falso.

status.showUntrackedFiles
Por padrão, git-status[1] e git-commit[1] mostram arquivos que não são rastreados atualmente pelo Git. Os diretórios que contêm apenas arquivos não rastreados são mostrados apenas com o nome do diretório. Mostrar arquivos não rastreados significa que o Git precisa lstat() todos os arquivos em todo o repositório, o que pode ser lento em alguns sistemas. Portanto, essa variável controla como os comandos exibem os arquivos não rastreados. Os valores possíveis são:

no- Não mostre arquivos não rastreados.

normal- Mostrar arquivos e diretórios não rastreados.

all- Mostre também arquivos individuais em diretórios não rastreados.

Se esta variável não for especificada, o padrão será normal . Essa variável pode ser substituída pela opção -u|--untracked-files de git-status[1] e git-commit[1] .

status.submoduleResumo
O padrão é falso. Se for definido como um número diferente de zero ou verdadeiro (idêntico a -1 ou um número ilimitado), o resumo do submódulo será habilitado e um resumo dos commits dos submódulos modificados será mostrado (veja a opção --summary-limit do git- submódulo[1] ). Observe que o comando de saída de resumo será suprimido para todos os submódulos quando diff.ignoreSubmodulesestiver definido como todos ou apenas para os submódulos em que submodule.<name>.ignore=all. A única exceção a essa regra é que o status e o commit mostrarão as alterações do submódulo em estágios. Para visualizar também o resumo dos submódulos ignorados, você pode usar a opção de linha de comando --ignore-submodules=dirty ou o comando git submodule summary , que mostra uma saída semelhante, mas não respeita essas configurações.

stash.useBuiltin
Variável de configuração não utilizada. Usado nas versões 2.22 a 2.26 do Git como uma escotilha de escape para habilitar a implementação do shellscript herdado do stash. Agora, a reescrita embutida em C é sempre usada. Definir isso emitirá um aviso, para alertar os usuários restantes que definir isso agora não faz nada.

stash.showIncludeUntracked
Se for definido como true, o git stash showcomando mostrará os arquivos não rastreados de uma entrada do stash. O padrão é falso. Veja a descrição do comando show em git-stash[1] .

stash.showPatch
Se for definido como true, o git stash showcomando sem opção mostrará a entrada do stash no formato de patch. O padrão é falso. Veja a descrição do comando show em git-stash[1] .

stash.showStat
Se for definido como true, o git stash showcomando sem uma opção mostrará o diffstat da entrada do stash. O padrão é verdadeiro. Veja a descrição do comando show em git-stash[1] .

submódulo.<nome>.url
A URL de um submódulo. Esta variável é copiada do arquivo .gitmodules para o git config via git submodule init . O usuário pode alterar a URL configurada antes de obter o submódulo via git submodule update . Se nem submodule.<name>.active ou submodule.active forem definidos, a presença dessa variável será usada como um fallback para indicar se o submódulo é de interesse para comandos git. Veja git-submodule[1] e gitmodules[5] para detalhes.

submódulo.<nome>.atualização
O método pelo qual um submódulo é atualizado por git submodule update , que é o único comando afetado, outros como git checkout --recurse-submodules não são afetados. Ele existe por razões históricas, quando git submodule era o único comando para interagir com submódulos; configurações como submodule.active e pull.rebasesão mais específicas. Ele é preenchido pelo git submodule initarquivo gitmodules[5] . Veja a descrição do comando update em git-submodule[1] .

submódulo.<nome>.ramificação
O nome da ramificação remota de um submódulo, usado pelo git submodule update --remote. Configure esta opção para substituir o valor encontrado no .gitmodulesarquivo. Veja git-submodule[1] e gitmodules[5] para detalhes.

submódulo.<nome>.fetchRecurseSubmodules
Esta opção pode ser usada para controlar a busca recursiva deste submódulo. Ele pode ser substituído usando a opção de linha de comando --[no-]recurse-submodules para "git fetch" e "git pull". Essa configuração substituirá a do arquivo gitmodules[5] .

submódulo.<nome>.ignore
Define em que circunstâncias o "git status" e a família diff mostram um submódulo como modificado. Quando definido como "todos", ele nunca será considerado modificado (mas ainda assim aparecerá na saída de status e confirmará quando tiver sido preparado), "sujo" ignorará todas as alterações na árvore de trabalho dos submódulos e levará apenas diferenças entre o HEAD do submódulo e o commit registrado no superprojeto. "untracked" também permitirá que submódulos com arquivos rastreados modificados em sua árvore de trabalho apareçam. O uso de "none" (o padrão quando esta opção não está definida) também mostra os submódulos que possuem arquivos não rastreados em sua árvore de trabalho como alterados. Esta configuração substitui qualquer configuração feita em .gitmodules para este submódulo, ambas as configurações podem ser substituídas na linha de comando usando o "Os comandos do submódulo git não são afetados por essa configuração.

submódulo.<nome>.ativo
Valor booleano que indica se o submódulo é de interesse para comandos git. Esta opção de configuração tem precedência sobre a opção de configuração submodule.active. Veja gitsubmodules[7] para detalhes.

submódulo.ativo
Um campo repetido que contém um pathspec usado para corresponder ao caminho de um submódulo para determinar se o submódulo é de interesse para comandos git. Veja gitsubmodules[7] para detalhes.

submódulo.recurse
Um booleano indicando se os comandos devem habilitar a --recurse-submodules opção por padrão. Aplica-se a todos os comandos que suportam esta opção ( checkout, fetch, grep, pull, push, read-tree, resete ) exceto restoree . O padrão é falso. Quando definido como verdadeiro, pode ser desativado através da opção. Observe que alguns comandos do Git sem essa opção podem chamar alguns dos comandos acima afetados por ; por exemplo vai chamar mas não tem opção. Para esses comandos, uma solução alternativa é alterar temporariamente o valor de configuração usando .switchclonels-files--no-recurse-submodulessubmodule.recursegit remote updategit fetch--no-recurse-submodulesgit -c submodule.recurse=0

submodule.fetchJobs
Especifica quantos submódulos são buscados/clonados ao mesmo tempo. Um inteiro positivo permite até esse número de submódulos buscados em paralelo. Um valor de 0 fornecerá algum padrão razoável. Se não estiver definido, o padrão é 1.

submódulo.local alternativo
Especifica como os submódulos obtêm alternativas quando os submódulos são clonados. Os valores possíveis são no, superproject. Por padrão noé assumido, o que não adiciona referências. Quando o valor é definido para superprojecto submódulo a ser clonado, calcula sua localização alternativa em relação aos superprojetos alternativos.

submodule.alternateErrorStrategy
Especifica como tratar erros com as alternativas para um submódulo conforme calculado via submodule.alternateLocation. Os valores possíveis são ignore, info, die. O padrão é die. Observe que, se definido como ignore ou info, e se houver um erro com a alternativa calculada, o clone continuará como se nenhuma alternativa tivesse sido especificada.

tag.forceSignAnnotated
Um booleano para especificar se as tags anotadas criadas devem ser assinadas com GPG. Se --annotatefor especificado na linha de comando, terá precedência sobre esta opção.

etiqueta.classificar
Esta variável controla a ordem de classificação das tags quando exibidas por git-tag[1] . Sem a opção "--sort=<value>" fornecida, o valor dessa variável será usado como padrão.

tag.gpgSign
Um booleano para especificar se todas as tags devem ser assinadas com GPG. O uso desta opção ao executar um script automatizado pode resultar na assinatura de um grande número de tags. Portanto, é conveniente usar um agente para evitar digitar sua senha gpg várias vezes. Observe que essa opção não afeta o comportamento de assinatura de tags ativado pelas opções "-u <keyid>" ou "--local-user=<keyid>".

tar.umask
Esta variável pode ser usada para restringir os bits de permissão das entradas do arquivo tar. O padrão é 0002, que desativa o bit de gravação mundial. O valor especial "user" indica que o umask do usuário de arquivamento será usado. Veja umask(2) e git-archive[1] .

As configurações do Trace2 são lidas apenas do sistema e dos arquivos de configuração global; arquivos de configuração local e de árvore de trabalho do repositório e -c argumentos de linha de comando não são respeitados.

trace2.normalTarget
Esta variável controla o destino de destino normal. Pode ser substituído pela GIT_TRACE2variável de ambiente. A tabela a seguir mostra os valores possíveis.

trace2.perfTarget
Essa variável controla o destino da meta de desempenho. Pode ser substituído pela GIT_TRACE2_PERFvariável de ambiente. A tabela a seguir mostra os valores possíveis.

trace2.eventTarget
Essa variável controla o destino do destino do evento. Pode ser substituído pela GIT_TRACE2_EVENTvariável de ambiente. A tabela a seguir mostra os valores possíveis.

0ou false- Desativa o alvo.

1ou true- Grava em STDERR.

[2-9]- Grava no descritor de arquivo já aberto.

<absolute-pathname>- Grava no arquivo no modo de acréscimo. Se o destino já existir e for um diretório, os rastreamentos serão gravados em arquivos (um por processo) sob o diretório fornecido.

af_unix:[<socket_type>:]<absolute-pathname>- Gravar em um DomainSocket Unix (em plataformas que os suportam). O tipo de soquete pode ser streamou dgram; se omitido, o Git tentará ambos.

trace2.normalBreve
Boleano. Quando true time, filename, e lineos campos são omitidos da saída normal. Pode ser substituído pela GIT_TRACE2_BRIEFvariável de ambiente. O padrão é falso.

trace2.perfBreve
Boleano. Quando true time, filename, e lineos campos são omitidos da saída PERF. Pode ser substituído pela GIT_TRACE2_PERF_BRIEFvariável de ambiente. O padrão é falso.

trace2.eventoBreve
Boleano. Quando true time, filename, e lineos campos são omitidos da saída do evento. Pode ser substituído pela GIT_TRACE2_EVENT_BRIEFvariável de ambiente. O padrão é falso.

trace2.eventNesting
Inteiro. Especifica a profundidade desejada de regiões aninhadas na saída do evento. Regiões mais profundas que esse valor serão omitidas. Pode ser substituído pela GIT_TRACE2_EVENT_NESTING variável de ambiente. Padrões para 2.

trace2.configParams
Uma lista separada por vírgulas de padrões de configurações "importantes" que devem ser registradas na saída trace2. Por exemplo, core.*,remote.*.urlfaria com que a saída trace2 contenha eventos que listam cada remoto configurado. Pode ser substituído pela GIT_TRACE2_CONFIG_PARAMSvariável de ambiente. Desativado por padrão.

trace2.envVars
Uma lista separada por vírgulas de variáveis ​​de ambiente "importantes" que devem ser registradas na saída trace2. Por exemplo, GIT_HTTP_USER_AGENT,GIT_CONFIGfaria com que a saída trace2 contenha eventos que listam as substituições para o agente do usuário HTTP e o local do arquivo de configuração do Git (supondo que algum esteja definido). Pode ser substituído pela GIT_TRACE2_ENV_VARSvariável de ambiente. Desativado por padrão.

trace2.destinationDebug
Boleano. Quando true, o Git imprimirá mensagens de erro quando um destino de destino de rastreamento não puder ser aberto para gravação. Por padrão, esses erros são suprimidos e o rastreamento é desativado silenciosamente. Pode ser substituído pela GIT_TRACE2_DST_DEBUGvariável de ambiente.

trace2.maxFiles
Inteiro. Ao gravar arquivos de rastreamento em um diretório de destino, não grave rastreamentos adicionais se excedermos esse número de arquivos. Em vez disso, escreva um arquivo sentinela que bloqueie o rastreamento adicional para esse diretório. O padrão é 0, o que desativa essa verificação.

transfer.fsckObjects
Quando fetch.fsckObjectsou receive.fsckObjectsnão são definidos, o valor dessa variável é usado em seu lugar. O padrão é falso.

Quando definido, a busca ou recepção será abortada no caso de um objeto malformado ou um link para um objeto inexistente. Além disso, vários outros problemas são verificados, incluindo problemas herdados (consulte Recursos fsck.<msg-id>) e possíveis problemas de segurança, como a existência de um .GITdiretório ou um arquivo malicioso .gitmodules(consulte as notas de versão para v2.2.1 e v2.17.1 para obter detalhes). Outras verificações de sanidade e segurança podem ser adicionadas em versões futuras.

No lado do recebimento, a falha de fsckObjects tornará esses objetos inacessíveis, consulte "QUARANTINE ENVIRONMENT" em git-receive-pack[1] . No lado da busca, os objetos malformados serão deixados sem referência no repositório.

Devido à natureza não-quarentena da fetch.fsckObjects implementação, não se pode confiar que deixará o armazenamento de objetos limpo como receive.fsckObjectspode.

À medida que os objetos são descompactados, eles são gravados no armazenamento de objetos, portanto, pode haver casos em que objetos maliciosos sejam introduzidos mesmo que a "busca" tenha falhado, apenas para ter uma "busca" subsequente bem-sucedida porque apenas novos objetos recebidos são verificados, não aqueles que já foram gravados no armazenamento de objetos. Essa diferença de comportamento não deve ser considerada. No futuro, esses objetos também poderão ser colocados em quarentena para "buscar".

Por enquanto, os paranóicos precisam encontrar uma maneira de emular o ambiente de quarentena se quiserem a mesma proteção que "empurrar". Por exemplo, no caso de um espelho interno, faça o espelhamento em duas etapas, uma para buscar os objetos não confiáveis ​​e, em seguida, faça um segundo "push" (que usará a quarentena) para outro repositório interno e faça com que os clientes internos consumam esse push- para o repositório, ou embargo buscas internas e só as permite depois que um "fsck" completo for executado (e nenhuma nova busca aconteceu nesse meio tempo).

transfer.hideRefs
String(s) receive-packe upload-packuse para decidir quais referências devem ser omitidas de seus anúncios iniciais. Use mais de uma definição para especificar várias strings de prefixo. Uma ref que está sob as hierarquias listadas no valor dessa variável é excluída e fica oculta ao responder a git pushou git fetch. Veja receive.hideRefse uploadpack.hideRefspara versões específicas do programa desta configuração.

Você também pode incluir um !na frente do nome ref para negar a entrada, expondo-a explicitamente, mesmo que uma entrada anterior a tenha marcado como oculta. Se você tiver vários valores hideRefs, as entradas posteriores substituem as anteriores (e as entradas em arquivos de configuração mais específicos substituem as menos específicas).

Se um namespace estiver em uso, o prefixo do namespace será removido de cada referência antes de corresponder aos transfer.hiderefspadrões. Para combinar refs antes de remover, adicione um ^na frente do nome da ref. Se você combinar !e ^, !deve ser especificado primeiro.

Por exemplo, se refs/heads/masterfor especificado em transfer.hideRefse o namespace atual for foo, então refs/namespaces/foo/refs/heads/master será omitido dos anúncios. Se uploadpack.allowRefInWantestiver definido, upload-packtratará em um comando want-ref refs/heads/masterprotocol v2 como se não existisse. , por outro lado, ainda anunciará o id do objeto para o qual o ref está apontando sem mencionar seu nome (a chamada linha ".have").fetchrefs/namespaces/foo/refs/heads/masterreceive-pack

Mesmo se você ocultar refs, um cliente ainda poderá roubar os objetos alvo através das técnicas descritas na seção "SECURITY" da página man gitnamespaces[7] ; é melhor manter os dados privados em um repositório separado.

transfer.unpackLimit
Quando fetch.unpackLimitou receive.unpackLimitnão são definidos, o valor dessa variável é usado em seu lugar. O valor padrão é 100.

transfer.anuncieSID
Boleano. Quando true, os processos cliente e servidor anunciarão seus IDs de sessão exclusivos para sua contraparte remota. O padrão é falso.

uploadarchive.allowUnreachable
Se true, permite que os clientes usem git archive --remotepara solicitar qualquer árvore, acessível a partir das dicas de referência ou não. Veja a discussão na seção "SECURITY" do git-upload-archive[1] para mais detalhes. Padrões para false.

uploadpack.hideRefs
Essa variável é a mesma que transfer.hideRefs, mas se aplica apenas a upload-pack(e, portanto, afeta apenas buscas, não pushes). Uma tentativa de buscar uma referência oculta por git fetchfalhará. Veja também uploadpack.allowTipSHA1InWant.

uploadpack.allowTipSHA1InWant
Quando uploadpack.hideRefsestá em vigor, permite upload-pack aceitar uma solicitação de busca que pede um objeto na ponta de uma referência oculta (por padrão, tal solicitação é rejeitada). Veja também uploadpack.hideRefs. Mesmo que isso seja falso, um cliente pode roubar objetos através das técnicas descritas na seção "SECURITY" da página man gitnamespaces[7] ; é melhor manter os dados privados em um repositório separado.

uploadpack.allowReachableSHA1InWant
Permite upload-packaceitar uma solicitação de busca que pede um objeto que pode ser alcançado a partir de qualquer dica de referência. No entanto, observe que calcular a acessibilidade do objeto é computacionalmente caro. Padrões para false. Mesmo que isso seja falso, um cliente pode roubar objetos através das técnicas descritas na seção "SECURITY" da página man gitnamespaces[7] ; é melhor manter os dados privados em um repositório separado.

uploadpack.allowAnySHA1InWant
Permitir upload-packaceitar uma solicitação de busca que solicite qualquer objeto. Padrões para false.

uploadpack.keepAlive
Quando upload-packtiver começado pack-objects, pode haver um período de silêncio enquanto pack-objectsprepara a embalagem. Normalmente, ele produziria informações de progresso, mas se --quietfoi usado para a busca, pack-objectsnão produzirá nada até que os dados do pacote comecem. Alguns clientes e redes podem considerar o servidor travado e desistir. Definir esta opção instrui upload-packa enviar um pacote keepalive vazio a cada uploadpack.keepAlivesegundo. Definir esta opção como 0 desativa totalmente os pacotes keepalive. O padrão é 5 segundos.

uploadpack.packObjectsHook
Se esta opção estiver definida, quando upload-packexecutar git pack-objectspara criar um arquivo de pacote para um cliente, ele executará este comando de shell. O pack-objectscomando e os argumentos que ele executaria (incluindo o git pack-objects no início) são anexados ao comando shell. O stdin e o stdout do gancho são tratados como se pack-objectsele próprio fosse executado. Ou seja, upload-packalimentará a entrada pretendida para pack-objectso gancho e espera um arquivo de pacote completo no stdout.

Observe que essa variável de configuração é ignorada se for vista na configuração no nível do repositório (essa é uma medida de segurança contra a busca de repositórios não confiáveis).

uploadpack.allowFilter
Se esta opção for definida, upload-packsuportará a filtragem de objeto de busca parcial e clone parcial.

uploadpackfilter.allow
Fornece um valor padrão para filtros de objetos não especificados (consulte: a variável de configuração abaixo). Se definido como true, isso também habilitará todos os filtros que serão adicionados no futuro. Padrões para true.

uploadpackfilter.<filtro>.allow
Permitir ou banir explicitamente o filtro de objeto correspondente a <filter>, onde <filter>pode ser um dos seguintes: blob:none, blob:limit, object:type, tree, sparse:oid, ou combine. Se estiver usando filtros combinados, ambos combinee todos os tipos de filtro aninhados devem ser permitidos. Padrões para uploadpackfilter.allow.

uploadpackfilter.tree.maxDepth
Permitir apenas --filter=tree:<n>quando <n>não for maior que o valor de uploadpackfilter.tree.maxDepth. Se definido, isso também implica uploadpackfilter.tree.allow=true, a menos que essa variável de configuração já tenha sido definida. Não tem efeito se não estiver definido.

uploadpack.allowRefInWant
Se esta opção estiver configurada, upload-packsuportará o recurso do comando ref-in-want protocol version 2 . fetchEsse recurso destina-se ao benefício de servidores com balanceamento de carga que podem não ter a mesma visão de quais OIDs suas referências apontam devido ao atraso de replicação.

url.<base>.insteadOf
Qualquer URL que comece com esse valor será reescrito para começar, em vez disso, com <base>. Nos casos em que algum site atende a um grande número de repositórios e os atende com vários métodos de acesso, e alguns usuários precisam usar métodos de acesso diferentes, esse recurso permite que as pessoas especifiquem qualquer um dos URLs equivalentes e faça com que o Git reescreva automaticamente o URL para o melhor alternativa para o usuário em particular, mesmo para um repositório nunca antes visto no site. Quando mais de uma string em vez de corresponder a um determinado URL, a correspondência mais longa é usada.

Observe que quaisquer restrições de protocolo serão aplicadas ao URL reescrito. Se a reescrita alterar a URL para usar um protocolo personalizado ou um auxiliar remoto, talvez seja necessário ajustar a protocol.*.allowconfiguração para permitir a solicitação. Em particular, os protocolos que você espera usar para os submódulos devem ser definidos como alwaysem vez do padrão de user. Veja a descrição de protocol.allowacima.

url.<base>.pushInsteadOf
Qualquer URL que comece com esse valor não será enviado; em vez disso, ele será reescrito para começar com <base> e a URL resultante será enviada por push. Nos casos em que algum site atende a um grande número de repositórios e os atende com vários métodos de acesso, alguns dos quais não permitem push, esse recurso permite que as pessoas especifiquem um URL somente pull e o Git use automaticamente um URL apropriado para enviar, mesmo para um repositório nunca antes visto no site. Quando mais de uma string pushInsteadOf corresponde a um determinado URL, a correspondência mais longa é usada. Se um controle remoto tiver um pushurl explícito, o Git ignorará essa configuração para esse controle remoto.

nome do usuário
usuário.e-mail
nome do autor
autor.e-mail
committer.name
committer.email
As variáveis user.namee determinam o que termina no campo e dos objetos de confirmação. Se você precisar que ou seja diferente, as variáveis , , ou podem ser definidas. Além disso, tudo isso pode ser substituído pelas variáveis ​​de ambiente , , e . user.emailauthorcommitterauthorcommitterauthor.nameauthor.emailcommitter.namecommitter.emailGIT_AUTHOR_NAMEGIT_AUTHOR_EMAILGIT_COMMITTER_NAMEGIT_COMMITTER_EMAILEMAIL

Observe que as nameformas dessas variáveis ​​convencionalmente se referem a alguma forma de nome pessoal. Veja git-commit[1] e a seção de variáveis ​​de ambiente do git[1] para mais informações sobre essas configurações e a credential.usernameopção se você estiver procurando por credenciais de autenticação.

user.useConfigOnly
Instrua o Git a evitar tentar adivinhar os padrões para user.email e user.namee, em vez disso, recupere os valores apenas da configuração. Por exemplo, se você tiver vários endereços de e-mail e quiser usar um diferente para cada repositório, com esta opção de configuração definida truena configuração global junto com um nome, o Git solicitará que você configure um e-mail antes de fazer novos commits em um repositório recém-clonado. Padrões para false.

user.signingKey
Se git-tag[1] ou git-commit[1] não estiver selecionando a chave que você deseja automaticamente ao criar uma tag assinada ou commit, você pode substituir a seleção padrão com esta variável. Esta opção é passada inalterada para o parâmetro --local-user do gpg, então você pode especificar uma chave usando qualquer método que o gpg suporte. Se gpg.format estiver definido para sshisso, poderá conter o caminho para sua chave ssh privada ou para a chave pública quando o agente ssh for usado. Alternativamente, pode conter uma chave pública prefixada comkey:: diretamente (por exemplo: "key::ssh-rsa XXXXXX identificador"). A chave privada precisa estar disponível via ssh-agent. Se não estiver definido, o git chamará gpg.ssh.defaultKeyCommand (por exemplo: "ssh-add -L") e tentará usar a primeira chave disponível. Para compatibilidade com versões anteriores, uma chave bruta que começa com "ssh-", como "identificador ssh-rsa XXXXXX", é tratada como "identificador key::ssh-rsa XXXXXX", mas este formulário está obsoleto; em vez disso, use o key::formulário.

versionsort.prereleaseSuffix (obsoleto)
Alias ​​obsoletos para versionsort.suffix. Ignorado se versionsort.suffixestiver definido.

versionsort.suffix
Mesmo quando a classificação de versão é usada em git-tag[1] , os nomes de tags com a mesma versão base, mas com sufixos diferentes, ainda são classificados lexicograficamente, resultando, por exemplo, em tags de pré-lançamento que aparecem após o lançamento principal (por exemplo, "1.0-rc1" após "1.0") . Esta variável pode ser especificada para determinar a ordem de classificação de tags com sufixos diferentes.

Ao especificar um único sufixo nesta variável, qualquer tagname contendo esse sufixo aparecerá antes da versão principal correspondente. Por exemplo, se a variável estiver definida como "-rc", todas as tags "1.0-rcX" aparecerão antes de "1.0". Se especificado várias vezes, uma vez por sufixo, a ordem dos sufixos na configuração determinará a ordem de classificação dos tagnames com esses sufixos. Por exemplo, se "-pre" aparecer antes de "-rc" na configuração, todas as tags "1.0-preX" serão listadas antes de qualquer tag "1.0-rcX". A colocação da tag de lançamento principal em relação a tags com vários sufixos pode ser determinada especificando o sufixo vazio entre esses outros sufixos. Por exemplo, se os sufixos "-rc", "", "-ck" e "-bfs"

Se mais de um sufixo corresponder ao mesmo tagname, então esse tagname será classificado de acordo com o sufixo que começa na primeira posição no tagname. Se mais de um sufixo correspondente diferente começar na primeira posição, esse tagname será classificado de acordo com o mais longo desses sufixos. A ordem de classificação entre os diferentes sufixos é indefinida se eles estiverem em vários arquivos de configuração.

web.browser
Especifique um navegador da Web que pode ser usado por alguns comandos. Atualmente, apenas git-instaweb[1] e git-help[1] podem usá-lo.

worktree.guessRemoto
Se nenhuma ramificação for especificada e nem -bnem -Bnem --detachfor usado, o git worktree addpadrão será criar uma nova ramificação a partir de HEAD. Se worktree.guessRemoteestiver definido como true, worktree addtenta localizar uma ramificação de rastreamento remoto cujo nome corresponda exclusivamente ao nome da nova ramificação. Se tal ramificação existir, ela será verificada e definida como "upstream" para a nova ramificação. Se nenhuma correspondência puder ser encontrada, ele voltará a criar uma nova ramificação a partir do HEAD atual.

INSETOS
Ao usar a sintaxe obsoleta [section.subsection], alterar um valor resultará na adição de uma chave de várias linhas em vez de uma alteração, se a subseção for fornecida com pelo menos um caractere maiúsculo. Por exemplo, quando a configuração se parece com

  chave [seção.subseção] 
    = valor1
e correr git config section.Subsection.key value2resultará em

  [seção.subseção] 
    chave = valor1 
    chave = valor2
GIT
Parte da suíte git[1]